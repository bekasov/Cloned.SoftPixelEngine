/**
This is a test script for the new token-parser in the 'SoftPixel Engine' version 3.3
*/

1 + (3 - 5) * 2 - 8 * 9;

3.141592654
.123

/*

digit			= 0 | 1 | ... | 9
letter			= a | ... | z | A | ... | Z
identifier		= ( letter | _ ) ( letter | digit | _ )*

data_type		= void | byte | short | int | ubyte | ushort | uint | float | double
ptr_type		= data_type *
str_type		= string

block			= { statement }

param_list		= void
param_list		= data_type identifier
param_list		= data_type identifier = digit
param_list		= str_type identifier = " (letter)* "
param_list		= param_list, param_list

function_decl	= data_type identifier()
function_decl	= data_type identifier(param_list)
function_def	= function_decl block

operator		= + | - | * | / | % | >> | << | & | | | ^
comp_operator	= = | >= | <= | > | <
assign_operator	= += | -= | *= | /= | %= | >>= | <<= | := | |= | &= | ^=
concat_operator	= && | || | and | or

expression		= digit
expression		= identifier
expression		= identifier assign_operator expression
expression		= expression comp_operator expression
expression		= expression operator expression
expression		= expression concat_operator expression
expression		= (expression)

statement		= expression;
statement		= statement statement
statement		= function_decl;
statement		= function_def
statement		= interface identifier block
statement		= class identifier block
statement		= class identifier implements identifier block



interface BaseClass
{
	public:
		void TestFunction(int Param1, float Param2);
		
	private:
		int BaseMem;
		float BaseFlt;
}

class TestClass implements BaseClass
{
	public:
		@override
		void TestFunction(int Param1, float Param2)
		{
			BaseMem = Param1 * 2 + 7;
			BaseFlt = (Param2 / 3) * 5.3;
		}
}

*/

/**

int b = a * 3 + 4;
== v == v == v ==

MOV b, a
MUL b, 3
ADD b, 4

*/

