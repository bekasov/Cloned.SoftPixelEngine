
; Test Material (24/09/2013)

material "TestMat0" {
	
	@x = 255
	@y = 0
	
	; ---------
	
	; Valid
	@a = -@x
	@b = "test"
	@c = @b + " " + @b
	@h = @workingDir
	
	; Invaid
	;@d = 
	;@e = -
	;@f = @b +
	;@g = 255 + 10
	
	; ---------
	
	diffuse = 255, 230, 100, 255			; RGBA
	specular = @y, @y, @x					; RGB
	ambient = 50							; Brightness
	
	shininess = 0.8
	offsetFactor = -1.0
	offsetUnits = 0.0
	alphaReference = 0.1
	
	shading = gouraud
	renderFace = both
	
	wireframeFront = lines
	
	colorMaterial = false
	depthTest = true
	lighting = true
	fog = true
	
}

vertexFormat "MyVertexFormat" {
	
	coord {
		size = 3
		type = float
	}
	normal { }					; Default setting: size = 3, type = float
	texCoord { size = 2 }
	texCoord { size = 3 }
	texCoord { size = 3 }
	
;	universal "Pos" {
;		size = 3
;		type = float
;		normalize = true
;		attribute = binormal
;	}
;	universal "Binormal" { size = 3 }
;	universal "Tangent" { size = 3 }
}

discard {

@texPath = @workingDir + "/Textures/"

texture "MyTex0" {
	
	file			= @texPath + "TestImage.jpg"
	type			= tex2D							; tex1D, tex2D, tex3D, texCube, tex1DArray, tex2DArray, texCubeArray, texRect, texBuffer, tex1DRW, tex2DRW, tex3DRW, tex1DArrayRW or tex2DArrayRW
	bufferType		= ubyte							; ubyte or float
	format			= rgb							; alpha, gray, grayAlpha, rgb, bgr, rgba, bgra or depthComponent
	formatHW		= ubyte8						; ubyte8, float16, float32, int32 or uint32
	width			= 512
	height			= 256
	depth			= 1
	colorKey		= 255, 0, 255, 0
	renderTarget	= true
	
	filter {
		mipMaps		= true
		anisotropy	= 8
		
		wrapX		= repeat
		wrapY		= mirror
		wrapZ		= clamp
		
		min			= smooth
		mag			= smooth
		mip			= trilinear
	}
	
}

textureLayer "NormalMap" relief {
	
	tex = MyTex0
	enable = true
	visibleMask = $000000FF
	index = 1
	
	heightMapScale = 0.025
	viewRange = 0.1
	minSamples = 0
	maxSamples = 50
	
}

}

shader "SimpleColorShader" MyVertexFormat {
	
	glsl {
		vertex {
			version = std120
			source = "
				#version 120
				varying vec3 Normal;
				void main() {
					gl_Position = ftransform();
					Normal = normalize(mat3(gl_ModelViewMatrix) * gl_Normal);
				}
			"
		}
		pixel {
			version = std120
			source = "
				#version 120
				varying vec3 Normal;
				void main() {
					float NdotL = dot(vec3(0.0, 0.0, 1.0), Normal);
					if (!gl_FrontFacing)
						NdotL = -NdotL;
					NdotL = max(0.2, NdotL);
					gl_FragColor = vec4(vec3(1.0, 0.8, 0.3) * vec3(NdotL), 1.0);
				}
			"
		}
	}
	
	hlsl3 {
		@ext = "hlsl"
		@path = "Shaders"
		@filename = "TestShader" + "." + @ext
		@shaderCode = @path + "/" + @filename
		vertex "VertexMain" {
			sourceFile = @shaderCode
			version = vs_3_0
		}
		pixel "PixelMain" {
			sourceFile = @shaderCode
			version = ps_3_0
		}
	}
	
	hlsl5 {
		@shaderCode = "
			cbuffer BufferMain : register(b0) {
				float4 WVPMatrix;
			};
			float4 VertexMain(float3 Pos : POSITION) : SV_Position {
				return mul(WVPMatrix, float4(Pos, 1.0));
			}
			float4 PixelMain(float4 Pos : SV_Position) : SV_Target0 {
				return (float4)1.0;
			}
		"
		vertex "VertexMain" {
			version = vs_5_0
			source = @shaderCode
		}
		pixel "PixelMain" {
			version = ps_5_0
			source = @shaderCode
		}
	}
	
}

