"/*\n"
" * GBuffer D3D11 shader header file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"/*\n"
"\n"
"Compilation options:\n"
"\n"
"USE_TEXTURE_MATRIX  -> Enables texture matrix transformations for texture coordinates.\n"
"NORMAL_MAPPING      -> Enables normal mapping.\n"
"PARALLAX_MAPPING    -> Enables parallax-occlusion mapping (Requires NORMAL_MAPPING to be enabled).\n"
"NORMALMAP_XYZ_H        -> Normal map contains vector data (xyz in RGB) and height-field data (h in Alpha-Channel). When this is defined, no height-map is used for parallax-mapping.\n"
"TESSELLATION        -> Enables height-field tessellation.\n"
"HAS_SPECULAR_MAP    -> Specifies that a specular is used.\n"
"\n"
"*/\n"
"\n"
"/*\n"
" * ======= Vertex shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SVertexInput\n"
"{\n"
"    float3 Position : POSITION;\n"
"    float3 Normal   : NORMAL;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    #ifdef NORMAL_MAPPING\n"
"    float3 Tangent  : TEXCOORD1;\n"
"    float3 Binormal : TEXCOORD2;\n"
"    #endif\n"
"};\n"
"\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position                 : SV_Position;\n"
"    float2 TexCoord                 : TEXCOORD0;\n"
"    float3 WorldPos                 : TEXCOORD1;\n"
"    float3 Normal                   : TEXCOORD2;\n"
"    #ifdef NORMAL_MAPPING\n"
"    float3 Tangent                  : TEXCOORD3;\n"
"    float3 Binormal                 : TEXCOORD4;\n"
"    #   ifdef PARALLAX_MAPPING\n"
"    float4 ViewVertexDirAndDepth    : TEXCOORD5;\n"
"    #   endif\n"
"    #endif\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"cbuffer BufferMain : register(b0)\n"
"{\n"
"    float4x4 WorldViewProjectionMatrix;\n"
"    float4x4 WorldMatrix;\n"
"\n"
"    #ifdef USE_TEXTURE_MATRIX\n"
"    float4x4 TextureMatrix;\n"
"    #endif\n"
"\n"
"    float3 ViewPosition;    //!< Global camera position.\n"
"};\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"SVertexOutput VertexMain(SVertexInput In)\n"
"{\n"
"    SVertexOutput Out = (SVertexOutput)0;\n"
"    \n"
"    /* Process vertex transformation for position and normal */\n"
"    float3x3 NormalMatrix = (float3x3)WorldMatrix;\n"
"\n"
"    Out.Position    = mul(WorldViewProjectionMatrix, float4(In.Position, 1.0));\n"
"    Out.WorldPos    = mul(WorldMatrix, float4(In.Position, 1.0)).xyz;\n"
"    Out.Normal      = mul(NormalMatrix, In.Normal);\n"
"\n"
"    #ifdef NORMAL_MAPPING\n"
"    \n"
"    /* Process transformation for tangent space */\n"
"    Out.Tangent     = mul(NormalMatrix, In.Tangent);\n"
"    Out.Binormal    = mul(NormalMatrix, In.Binormal);\n"
"\n"
"    #   ifdef PARALLAX_MAPPING\n"
"    NormalMatrix = float3x3(\n"
"        normalize(Out.Tangent),\n"
"        normalize(Out.Binormal),\n"
"        normalize(Out.Normal)\n"
"    );\n"
"\n"
"    Out.ViewVertexDirAndDepth.xyz   = ViewPosition - Out.WorldPos.xyz;\n"
"    Out.ViewVertexDirAndDepth.xyz   = mul(NormalMatrix, Out.ViewVertexDirAndDepth.xyz);\n"
"    Out.ViewVertexDirAndDepth.y     = -Out.ViewVertexDirAndDepth.y;\n"
"\n"
"    Out.ViewVertexDirAndDepth.w     = Out.Position.z;\n"
"    #   endif\n"
"\n"
"    #endif\n"
"\n"
"    #ifdef USE_TEXTURE_MATRIX\n"
"    Out.TexCoord = (float2)mul(TextureMatrix, float4(In.TexCoord, 0.0, 1.0));\n"
"    #else\n"
"    Out.TexCoord = In.TexCoord;\n"
"    #endif\n"
"    \n"
"    return Out;\n"
"}\n"
"\n"
"\n"
"/*\n"
" * ======= Pixel shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SPixelOutput\n"
"{\n"
"    float4 DiffuseAndSpecular   : SV_Target0;\n"
"    float4 NormalAndDepth       : SV_Target1;\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"SAMPLER2D(DiffuseMap, 0);\n"
"\n"
"#ifdef HAS_SPECULAR_MAP\n"
"SAMPLER2D(SpecularMap, 1);\n"
"#endif\n"
"\n"
"#ifdef NORMAL_MAPPING\n"
"\n"
"// Contains only height-field information (in the alpha channel) when PARALLAX_MAPPING is enabled\n"
"#   ifdef HAS_SPECULAR_MAP\n"
"SAMPLER2D(NormalMap, 2);\n"
"#       if defined(PARALLAX_MAPPING) && !defined(NORMALMAP_XYZ_H)\n"
"SAMPLER2D(HeightMap, 3);\n"
"#       endif\n"
"#   else\n"
"SAMPLER2D(NormalMap, 1);\n"
"#       if defined(PARALLAX_MAPPING) && !defined(NORMALMAP_XYZ_H)\n"
"SAMPLER2D(HeightMap, 2);\n"
"#       endif\n"
"#   endif\n"
"\n"
"#endif\n"
"\n"
"cbuffer BufferRelief : register(b1)\n"
"{\n"
"    float SpecularFactor    : packoffset(c0.x);\n"
"    float HeightMapScale    : packoffset(c0.y);\n"
"    float ParallaxViewRange : packoffset(c0.z);\n"
"    int EnablePOM           : packoffset(c1.x);\n"
"    int MinSamplesPOM       : packoffset(c1.y);\n"
"    int MaxSamplesPOM       : packoffset(c1.z);\n"
"};\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"SPixelOutput PixelMain(SVertexOutput In)\n"
"{\n"
"    SPixelOutput Out = (SPixelOutput)0;\n"
"    \n"
"    float4 DiffuseAndSpecular = (float4)0.0;\n"
"    float4 NormalAndDepth = (float4)0.0;\n"
"\n"
"    float2 TexCoord                 = In.TexCoord;\n"
"    float3 WorldPos                 = In.WorldPos;\n"
"    float3 Normal                   = In.Normal;\n"
"\n"
"    #ifdef NORMAL_MAPPING\n"
"    \n"
"    float3 Tangent                  = In.Tangent;\n"
"    float3 Binormal                 = In.Binormal;\n"
"\n"
"    #   ifdef PARALLAX_MAPPING\n"
"    float4 ViewVertexDirAndDepth    = In.ViewVertexDirAndDepth;\n"
"    #   endif\n"
"\n"
"    #endif\n"
"\n"
"/*\n"
" * GBuffer pixel shader main file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"#ifndef NORMAL_MAPPING\n"
"\n"
"/* Sample diffuse color */\n"
"DiffuseAndSpecular = tex2D(DiffuseMap, TexCoord);\n"
"\n"
"#   ifdef HAS_SPECULAR_MAP\n"
"/* Sample specular color */\n"
"DiffuseAndSpecular.a = tex2D(SpecularMap, TexCoord).r * SpecularFactor;\n"
"#   endif\n"
"\n"
"NormalAndDepth.xyz = Normal;\n"
"\n"
"#else\n"
"\n"
"#   ifdef PARALLAX_MAPPING\n"
"if (!EnablePOM)\n"
"{\n"
"#   endif\n"
"    \n"
"    /* Sample diffuse color */\n"
"    DiffuseAndSpecular = tex2D(DiffuseMap, TexCoord);\n"
"    \n"
"    /* Perform alpha-test clipping */\n"
"    clip(DiffuseAndSpecular.a - 0.5);\n"
"    \n"
"    /* Sample normal color */\n"
"    NormalAndDepth.xyz = tex2D(NormalMap, TexCoord).rgb;\n"
"    \n"
"    #ifdef HAS_SPECULAR_MAP\n"
"    /* Sample specular color */\n"
"    DiffuseAndSpecular.a = tex2D(SpecularMap, TexCoord).r * SpecularFactor;\n"
"    #endif\n"
"    \n"
"#   ifdef PARALLAX_MAPPING\n"
"}\n"
"else\n"
"{\n"
"    /* Compute parallax-occlusion displacement */\n"
"    float ParallaxLimit = (length(ViewVertexDirAndDepth.xy) / ViewVertexDirAndDepth.z) * HeightMapScale;\n"
"    \n"
"    float2 Offset       = normalize(-ViewVertexDirAndDepth.xy) * ParallaxLimit;\n"
"    \n"
"    float Interpolation = saturate(ParallaxViewRange / ViewVertexDirAndDepth.w);\n"
"    int NumSamples      = int(mix(float(MinSamplesPOM), float(MaxSamplesPOM), Interpolation));\n"
"    \n"
"    float StepSize      = 1.0 / float(NumSamples);\n"
"    \n"
"    float2 dx           = ddx(TexCoord);\n"
"    float2 dy           = ddy(TexCoord);\n"
"    \n"
"    float2 OffsetStep   = Offset * StepSize;\n"
"    \n"
"    float2 CurOffset    = CAST(float2, 0.0);\n"
"    float2 PrevOffset   = CAST(float2, 0.0);\n"
"    float CurSample     = 0.0;\n"
"    float PrevSample    = 0.0;\n"
"    \n"
"    float StepHeight    = 1.0;\n"
"    int SampleIndex     = 0;\n"
"    \n"
"    while (SampleIndex < NumSamples)\n"
"    {\n"
"        #ifdef NORMALMAP_XYZ_H\n"
"        CurSample = tex2DGrad(NormalMap, TexCoord + CurOffset, dx, dy).a;\n"
"        #else\n"
"        CurSample = tex2DGrad(HeightMap, TexCoord + CurOffset, dx, dy).r;\n"
"        #endif\n"
"        \n"
"        if (CurSample > StepHeight)\n"
"        {\n"
"            float Ua = (PrevSample - (StepHeight + StepSize)) / (StepSize + (CurSample - PrevSample));\n"
"            CurOffset = PrevOffset + OffsetStep * Ua;\n"
"            break;\n"
"        }\n"
"        else\n"
"        {\n"
"            ++SampleIndex;\n"
"            StepHeight -= StepSize;\n"
"            PrevOffset = CurOffset;\n"
"            CurOffset += OffsetStep;\n"
"            PrevSample = CurSample;\n"
"        }\n"
"    }\n"
"    \n"
"    /* Sample diffuse color */\n"
"    DiffuseAndSpecular = tex2DGrad(DiffuseMap, TexCoord + CurOffset, dx, dy);\n"
"    \n"
"    /* Sample normal color */\n"
"    NormalAndDepth.xyz = tex2DGrad(NormalMap, TexCoord + CurOffset, dx, dy).rgb;\n"
"    \n"
"    /* Perform alpha-test clipping */\n"
"    //clip(DiffuseAndSpecular.a - 0.5);\n"
"    \n"
"    #ifdef HAS_SPECULAR_MAP\n"
"    /* Sample specular color */\n"
"    DiffuseAndSpecular.a = tex2DGrad(SpecularMap, TexCoord + CurOffset, dx, dy).r * SpecularFactor;\n"
"    #endif\n"
"}\n"
"\n"
"#   endif // /PARALLAX_MAPPING\n"
"\n"
"/* Transform final normal vector into tangent-space */\n"
"NormalAndDepth.xyz = NormalAndDepth.xyz * 2.0 - 1.0;\n"
"MUL_NORMAL(NormalAndDepth.xyz);\n"
"\n"
"#endif // /NORMAL_MAPPING\n"
"\n"
"#ifndef HAS_SPECULAR_MAP\n"
"DiffuseAndSpecular.a = SpecularFactor;\n"
"#endif\n"
"\n"
"/* Compute depth distance between view position and pixel position */\n"
"NormalAndDepth.a = distance(ViewPosition, WorldPos);\n"
"    \n"
"    Out.DiffuseAndSpecular = DiffuseAndSpecular;\n"
"    Out.NormalAndDepth = NormalAndDepth;\n"
"\n"
"    return Out;\n"
"}\n"
