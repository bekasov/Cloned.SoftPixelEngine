"/*\n"
" * Deferred D3D11 shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"/*\n"
" * HLSL (SM 5) shader core file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"#define PI      3.14159265359\n"
"#define E      2.71828182846\n"
"#define MUL(m, v)    mul(m, v)\n"
"#define MUL_TRANSPOSED(v, m) mul(v, m)\n"
"#define MUL_NORMAL(n)   (n).xyz = mul((n).xyz, float3x3(Tangent, Binormal, Normal))\n"
"#define CAST(t, v)    ((t)(v))\n"
"#define SAMPLER2D(n, i)   Texture2D n : register(t##i); SamplerState Sampler##n : register(s##i)\n"
"#define SAMPLER2DARRAY(n, i) Texture2DArray n : register(t##i); SamplerState Sampler##n : register(s##i)\n"
"#define SAMPLERCUBEARRAY(n, i) TextureCubeArray n : register(t##i); SamplerState Sampler##n : register(s##i)\n"
"#define mod(a, b)    fmod(a, b)\n"
"#define floatBitsToInt(v)  asint(v)\n"
"#define floatBitsToUInt(v)  asuint(v)\n"
"#define intBitsToFloat(v)  asfloat(v)\n"
"#define uintBitsToFloat(v)  asfloat(v)\n"
"#define tex2D(s, t)    s.Sample(Sampler##s, t)\n"
"#define tex2DArray(s, t)  s.SampleLevel(Sampler##s, t.xyz)\n"
"#define tex2DArrayLod(s, t)  s.SampleLevel(Sampler##s, t.xyz, t.w)\n"
"#define tex2DGrad(s, t, x, y) s.SampleGrad(Sampler##s, t, x, y)\n"
"#define RWTexture3DUInt   RWTexture3D<uint>\n"
"inline void InterlockedImageCompareExchange(RWTexture3DUInt Image, int3 Coord, uint Compare, uint Value, out uint Result)\n"
"{\n"
" InterlockedCompareExchange(Image[Coord], Compare, Value, Result);\n"
"}\n"
"/*\n"
" * Deferred shader header file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"#ifndef MAX_LIGHTS\n"
"# define MAX_LIGHTS           35\n"
"#endif\n"
"#ifndef MAX_EX_LIGHTS\n"
"# define MAX_EX_LIGHTS        15\n"
"#endif\n"
"#ifndef NUM_JITTERD_OFFSETS\n"
"# define NUM_JITTERD_OFFSETS 20\n"
"#endif\n"
"#define LIGHT_DIRECTIONAL       0\n"
"#define LIGHT_POINT             1\n"
"#define LIGHT_SPOT              2\n"
"#define AMBIENT_LIGHT_FACTOR    0.0/*0.1*/ //!< Should be in the range [0.0 .. 1.0].\n"
"#define LIGHT_CUTOFF   0.01\n"
"#define MIN_VARIANCE            1.0\n"
"#define EOL      0xFFFFFFFF //!< Id for 'end-of-linked-list'\n"
"#define VPL_SINGULARITY_CLAMP 0.1\n"
"#define VPL_COUNT    100\n"
"#ifdef TILED_SHADING\n"
"# ifndef TILED_LIGHT_GRID_NUM_X\n"
"#  define TILED_LIGHT_GRID_NUM_X 8\n"
"# endif\n"
"# ifndef TILED_LIGHT_GRID_NUM_Y\n"
"#  define TILED_LIGHT_GRID_NUM_Y 8\n"
"# endif\n"
"# ifndef TILED_LIGHT_GRID_WIDTH\n"
"#  define TILED_LIGHT_GRID_WIDTH 32\n"
"# endif\n"
"# ifndef TILED_LIGHT_GRID_HEIGHT\n"
"#  define TILED_LIGHT_GRID_HEIGHT 32\n"
"# endif\n"
"#endif\n"
"struct SLightNode\n"
"{\n"
" uint LightID; //!< SLight index.\n"
" uint Next;  //!< Next SLightNode index. 'EOL' if end of linked list.\n"
"};\n"
"struct SLight\n"
"{\n"
"    float4 PositionAndInvRadius;    //!< Position (xyz), Inverse Radius (w).\n"
"    float3 Color;                   //!< Light color (used for diffuse and specular).\n"
" float Pad0;\n"
"    int Type;                       //!< 0 -> Directional light, 1 -> Point light, 2 -> Spot light.\n"
"    int ShadowIndex;                //!< Shadow map layer index. -1 -> no shadow map.\n"
" int UsedForLightmaps;      //!< Specifies whether this light is used for lightmaps or not.\n"
" int ExID;      //!< Index to the associated 'SLightEx' element.\n"
"};\n"
"struct SLightEx\n"
"{\n"
"    float4x4 ViewProjection;    //!< Spot-/ directional view-projection matrix.\n"
" float4x4 InvViewProjection; //!< Inverse view-projection matrix.\n"
"    float3 Direction;           //!< Spot-/ directional light direction.\n"
" float Pad0;\n"
"    float SpotTheta;   //!< First spot cone angle (in radian).\n"
"    float SpotPhiMinusTheta; //!< Second minus first spot cone angle (in radian).\n"
" float Pad1[2];\n"
"};\n"
"/*\n"
"Compilation options:\n"
"SHADOW_MAPPING  -> Enables shadow mapping.\n"
"BLOOM_FILTER    -> Enables bloom filter.\n"
"FLIP_Y_AXIS     -> Flips Y axis for OpenGL FBOs.\n"
"DEBUG_GBUFFER   -> Renders g-buffer for debugging.\n"
"*/\n"
"/*\n"
" * ======= Vertex shader: =======\n"
" */\n"
"struct SVertexInput\n"
"{\n"
"    float2 Position : POSITION;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"};\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position : SV_Position;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    float4 ViewRay : TEXCOORD1;\n"
"};\n"
"cbuffer BufferMain : register(b0)\n"
"{\n"
"    float4x4 ProjectionMatrix;\n"
"    float4x4 InvViewProjection;\n"
"    float4x4 WorldMatrix;       //!< 2D quad world matrix.\n"
"    float3 ViewPosition;        //!< Global camera position.\n"
"};\n"
"void Frustum(inout float4 v)\n"
"{\n"
"    v.x = (v.x - 0.5) * 2.0;\n"
"    v.y = (v.y - 0.5) * 2.0;\n"
"}\n"
"SVertexOutput VertexMain(SVertexInput In)\n"
"{\n"
"    SVertexOutput Out = (SVertexOutput)0;\n"
"    \n"
"    /* Process vertex transformation */\n"
"    float2 Coord = mul((float2x2)WorldMatrix, In.Position);\n"
"    Out.Position = mul(ProjectionMatrix, float4(Coord.x, Coord.y, 0.0, 1.0));\n"
"    /* Process vertex transformation for position and normal */\n"
"    Out.TexCoord = In.TexCoord;\n"
"    \n"
"    Out.ViewRay = float4(In.TexCoord.x, 1.0 - In.TexCoord.y, 1.0, 1.0);\n"
"    Frustum(Out.ViewRay);\n"
" Out.ViewRay = mul(InvViewProjection, Out.ViewRay);\n"
"    return Out;\n"
"}\n"
"/*\n"
" * ======= Pixel shader: =======\n"
" */\n"
"struct SPixelOutput\n"
"{\n"
"    float4 Color : SV_Target0;\n"
"    #ifdef BLOOM_FILTER\n"
"    float4 Specular : SV_Target1;\n"
"    #endif\n"
"};\n"
"SAMPLER2D(DiffuseAndSpecularMap, 0);\n"
"SAMPLER2D(NormalAndDepthMap, 1);\n"
"#ifdef SHADOW_MAPPING\n"
"SAMPLER2DARRAY(DirLightShadowMaps, 2);\n"
"SAMPLERCUBEARRAY(PointLightShadowMaps, 3);\n"
"# ifdef GLOBAL_ILLUMINATION\n"
"SAMPLER2DARRAY(DirLightDiffuseMaps, 4);\n"
"SAMPLERCUBEARRAY(PointLightDiffuseMaps, 5);\n"
"# endif\n"
"#endif\n"
"#ifdef TILED_SHADING\n"
"# ifdef SHADOW_MAPPING\n"
"#  define LG_RESOURCE_INDEX t4\n"
"#  define TLI_RESOURCE_INDEX t5\n"
"# else\n"
"#  define LG_RESOURCE_INDEX t2\n"
"#  define TLI_RESOURCE_INDEX t3\n"
"# endif\n"
"Buffer<uint> LightGrid : register(LG_RESOURCE_INDEX);\n"
"StructuredBuffer<SLightNode> TileLightIndexList : register(TLI_RESOURCE_INDEX);\n"
"#endif\n"
"cbuffer BufferShading : register(b1)\n"
"{\n"
"    float3 AmbientColor  : packoffset(c0); //!< Ambient light color.\n"
" float GIReflectivity : packoffset(c0.w); //!< Global illumination reflectivity.\n"
"    int LightCount   : packoffset(c1.x); //!< Count of light sources.\n"
"};\n"
"cbuffer BufferLight : register(b2)\n"
"{\n"
"    SLight Lights[MAX_LIGHTS];\n"
"};\n"
"cbuffer BufferLightEx : register(b3)\n"
"{\n"
"    SLightEx LightsEx[MAX_EX_LIGHTS];\n"
"};\n"
"#ifdef GLOBAL_ILLUMINATION\n"
"cbuffer VPLOffsetBlock : register(b4)\n"
"{\n"
" float4 VPLOffsets[VPL_COUNT];\n"
"};\n"
"#endif\n"
"/*\n"
" * Deferred shader procedures file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"float GetAngle(in float3 a, in float3 b)\n"
"{\n"
"    return acos(dot(a, b));\n"
"}\n"
"float GetSpotLightIntensity(in float3 LightDir, in SLightEx LightEx)\n"
"{\n"
" float Angle = GetAngle(LightDir, LightEx.Direction);\n"
" float ConeAngleLerp = (Angle - LightEx.SpotTheta) / LightEx.SpotPhiMinusTheta;\n"
" return saturate(1.0 - ConeAngleLerp);\n"
"}\n"
"#ifdef SHADOW_MAPPING\n"
"/**\n"
"Chebyshev inequality function for VSM (variance shadow maps)\n"
"see GPUGems3 at nVIDIA for more details:\n"
"http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html\n"
"*/\n"
"float ChebyshevUpperBound(in float2 Moments, in float t)\n"
"{\n"
"    /* One-tailed inequality valid if t > Moments.x */\n"
" float p = step(t, Moments.x);\n"
"    /* Compute variance */\n"
"    float Variance = Moments.y - (Moments.x*Moments.x);\n"
"    Variance = max(Variance, MIN_VARIANCE);\n"
"    \n"
"    /* Compute probabilistic upper bound. */\n"
"    float d = t - Moments.x;\n"
"    float p_max = Variance / (Variance + d*d);\n"
"    \n"
"    return max(p, p_max);\n"
"}\n"
"float LinStep(in float min, in float max, in float v)\n"
"{\n"
"    return saturate((v - min) / (max - min));\n"
"}\n"
"float ReduceLightBleeding(in float p_max, in float Amount)\n"
"{\n"
"    /* Remove the [0, amount] ail and linearly rescale [amount, 1] */\n"
"    return LinStep(Amount, 1.0, p_max);\n"
"}\n"
"float ShadowContribution(in float2 Moments, in float LightDistance)\n"
"{\n"
"    /* Compute the Chebyshev upper bound */\n"
"    float p_max = ChebyshevUpperBound(Moments, LightDistance);\n"
"    return ReduceLightBleeding(p_max, 0.6);\n"
"}\n"
"float4 Projection(in float4x4 ProjectionMatrix, in float4 WorldPos)\n"
"{\n"
"    float4 ProjectedPoint = MUL(ProjectionMatrix, WorldPos);\n"
"    ProjectedPoint.xy = (ProjectedPoint.xy / CAST(float2, ProjectedPoint.w) + CAST(float2, 1.0)) * CAST(float2, 0.5);\n"
"    return ProjectedPoint;\n"
"}\n"
"# ifdef GLOBAL_ILLUMINATION\n"
"bool ComputeVPLShading(in float3 WorldPos, in float3 Normal, in float3 IndirectPoint, inout float IntensityIL)\n"
"{\n"
" float3 IndirectDir = IndirectPoint - WorldPos;\n"
" if (dot(Normal, IndirectDir) <= 0.0)\n"
"  return false;\n"
" float DistanceIL = distance(WorldPos, IndirectPoint);\n"
" float AttnLinearIL    = DistanceIL;// ... * VPLRadius;\n"
" float AttnQuadraticIL = AttnLinearIL * DistanceIL;\n"
" IntensityIL = saturate(1.0 / (1.0 + AttnLinearIL + AttnQuadraticIL));// - LIGHT_CUTOFF);\n"
" float NdotIL = saturate(dot(Normal, normalize(IndirectDir)));\n"
" IntensityIL = min(VPL_SINGULARITY_CLAMP, IntensityIL * NdotIL) * GIReflectivity;\n"
" return true;\n"
"}\n"
"void ComputeVPLShadingSpotLight(\n"
"    in SLight Light, in SLightEx LightEx, in float3 WorldPos, in float3 Normal, inout float3 Diffuse)\n"
"{\n"
" float3 IndirectTexCoord = float3(0.0, 0.0, float(Light.ShadowIndex));\n"
" for (int i = 0; i < VPL_COUNT; ++i)\n"
" {\n"
"  IndirectTexCoord.xy = VPLOffsets[i].xy;\n"
"  float IndirectDist = tex2DArray(DirLightShadowMaps, IndirectTexCoord).r;\n"
"  float4 LightRay = float4(IndirectTexCoord.x*2.0 - 1.0, 1.0 - IndirectTexCoord.y*2.0, 1.0, 1.0);\n"
"  LightRay = normalize(MUL(LightEx.InvViewProjection, LightRay));\n"
"  float3 IndirectPoint = Light.PositionAndInvRadius.xyz + LightRay.xyz * CAST(float3, IndirectDist);\n"
"  float IntensityIL = 0.0;\n"
"  if (ComputeVPLShading(WorldPos, Normal, IndirectPoint, IntensityIL))\n"
"  {\n"
"   float3 IndirectColor = tex2DArray(DirLightDiffuseMaps, IndirectTexCoord).rgb;\n"
"   IndirectColor *= CAST(float3, IntensityIL);\n"
"   Diffuse += IndirectColor;\n"
"  }\n"
" }\n"
"}\n"
"void ComputeLowResLightShadingVPL(\n"
"    in SLight Light, in SLightEx LightEx, in float3 WorldPos,\n"
" in float3 Normal, inout float3 Diffuse)\n"
"{\n"
"    /* Compute diffuse color */\n"
"    Diffuse = CAST(float3, 0.0);\n"
"    float3 Specular = CAST(float3, 0.0);\n"
"    /* Apply shadow */\n"
"    if (Light.ShadowIndex != -1)\n"
" {\n"
"  if (Light.Type == LIGHT_POINT)\n"
"  {\n"
"  }\n"
"  else if (Light.Type == LIGHT_SPOT)\n"
"   ComputeVPLShadingSpotLight(Light, LightEx, WorldPos, Normal, Diffuse);\n"
" }\n"
" Diffuse *= Light.Color;\n"
"}\n"
"# endif\n"
"#endif\n"
"void ComputeLightShading(\n"
"    in SLight Light, in SLightEx LightEx,\n"
"    in float3 WorldPos, in float3 Normal, in float Shininess, in float3 ViewRay,\n"
" #ifdef HAS_LIGHT_MAP\n"
" inout float3 StaticDiffuseColor, inout float3 StaticSpecularColor,\n"
" #endif\n"
"    inout float3 DiffuseColor, inout float3 SpecularColor)\n"
"{\n"
"    /* Compute light direction vector */\n"
"    float3 LightDir = CAST(float3, 0.0);\n"
"    if (Light.Type != LIGHT_DIRECTIONAL)\n"
"        LightDir = normalize(WorldPos - Light.PositionAndInvRadius.xyz);\n"
"    else\n"
"        LightDir = LightEx.Direction;\n"
"    /* Compute phong shading */\n"
"    float NdotL = max(AMBIENT_LIGHT_FACTOR, dot(Normal, -LightDir));\n"
"    /* Compute light attenuation */\n"
"    float Distance = distance(WorldPos, Light.PositionAndInvRadius.xyz);\n"
"    float AttnLinear    = Distance * Light.PositionAndInvRadius.w;\n"
"    float AttnQuadratic = AttnLinear * Distance;\n"
"    float Intensity = (1.0 + LIGHT_CUTOFF) / (1.0 + AttnLinear + AttnQuadratic) - LIGHT_CUTOFF;\n"
"    if (Light.Type == LIGHT_SPOT)\n"
"  Intensity *= GetSpotLightIntensity(LightDir, LightEx);\n"
"    /* Compute diffuse color */\n"
"    float3 Diffuse = CAST(float3, Intensity * NdotL);\n"
"    /* Compute specular color */\n"
"    float3 Reflection = normalize(reflect(LightDir, Normal));\n"
"    float NdotHV = -dot(ViewRay, Reflection);\n"
"    float3 Specular = Light.Color * CAST(float3, Intensity * pow(max(0.0, NdotHV), Shininess));\n"
"    #ifdef SHADOW_MAPPING\n"
"    /* Apply shadow */\n"
"    if (Light.ShadowIndex != -1)\n"
" {\n"
"  if (Light.Type == LIGHT_POINT)\n"
"  {\n"
"  }\n"
"  else if (Light.Type == LIGHT_SPOT)\n"
"  {\n"
"   float4 ShadowTexCoord = Projection(LightEx.ViewProjection, float4(WorldPos, 1.0));\n"
"   if ( ShadowTexCoord.x >= 0.0 && ShadowTexCoord.x <= 1.0 &&\n"
"     ShadowTexCoord.y >= 0.0 && ShadowTexCoord.y <= 1.0 &&\n"
"     ShadowTexCoord.z > 0.0 )\n"
"   {\n"
"    ShadowTexCoord.y = 1.0 - ShadowTexCoord.y;\n"
"    ShadowTexCoord.z = float(Light.ShadowIndex);\n"
"    ShadowTexCoord.w = 2.0;//Distance*0.25;\n"
"    float2 Moments = tex2DArrayLod(DirLightShadowMaps, ShadowTexCoord).ra;\n"
"    float Shadow = ShadowContribution(Moments, Distance);\n"
"    Diffuse *= CAST(float3, Shadow);\n"
"    Specular *= CAST(float3, Shadow);\n"
"   }\n"
"   #if defined(GLOBAL_ILLUMINATION) && !defined(USE_LOWRES_VPL_SHADING)\n"
"   if (GIReflectivity > 0.0)\n"
"    ComputeVPLShadingSpotLight(Light, LightEx, WorldPos, Normal, Diffuse);\n"
"   #endif\n"
"  }\n"
" }\n"
"    #endif\n"
" Diffuse *= Light.Color;\n"
"    /* Add light color */\n"
" #ifdef HAS_LIGHT_MAP\n"
" if (Light.UsedForLightmaps != 0)\n"
" {\n"
"  StaticDiffuseColor += Diffuse;\n"
"  StaticSpecularColor += Specular;\n"
" }\n"
" else\n"
" {\n"
"  DiffuseColor += Diffuse;\n"
"  SpecularColor += Specular;\n"
" }\n"
" #else\n"
"    DiffuseColor += Diffuse;\n"
"    SpecularColor += Specular;\n"
" #endif\n"
"}\n"
"SPixelOutput PixelMain(SVertexOutput In)\n"
"{\n"
"    SPixelOutput Out = (SPixelOutput)0;\n"
"    /* Compute global pixel position (world space) */\n"
"    float4 NormalAndDepthDist = tex2D(NormalAndDepthMap, In.TexCoord);\n"
" NormalAndDepthDist.xyz = normalize(NormalAndDepthDist.xyz);\n"
" float3 ViewRayNorm = normalize(In.ViewRay.xyz);\n"
"    float3 WorldPos = ViewPosition + ViewRayNorm * (float3)NormalAndDepthDist.a;\n"
"    /* Compute light shading */\n"
" #ifdef HAS_LIGHT_MAP\n"
"    float3 StaticDiffuseLight = 0.0;\n"
"    float3 StaticSpecularLight = 0.0;\n"
"    #endif\n"
"    float3 DiffuseLight = AmbientColor;\n"
"    float3 SpecularLight = 0.0;\n"
" #ifdef TILED_SHADING\n"
" int2 LightGridIndex = int2(\n"
"  ((int)In.Position.x) / TILED_LIGHT_GRID_WIDTH,\n"
"  ((int)In.Position.y) / TILED_LIGHT_GRID_HEIGHT\n"
" );\n"
" uint Next = LightGrid[LightGridIndex.x + LightGridIndex.y * TILED_LIGHT_GRID_NUM_X];\n"
" while (Next != EOL)\n"
" {\n"
"  SLightNode Node = TileLightIndexList[Next];\n"
"  uint i = Node.LightID;\n"
"  Next = Node.Next;\n"
" #else\n"
"    for (int i = 0; i < LightCount; ++i)\n"
"    {\n"
" #endif\n"
"  ComputeLightShading(\n"
"   Lights[i], LightsEx[Lights[i].ExID],\n"
"   WorldPos, NormalAndDepthDist.xyz, 90.0, ViewRayNorm,\n"
"   #ifdef HAS_LIGHT_MAP\n"
"   StaticDiffuseLight, StaticSpecularLight,\n"
"   #endif\n"
"   DiffuseLight, SpecularLight\n"
"  );\n"
"    }\n"
" #ifdef HAS_LIGHT_MAP\n"
" float Illumination = tex2D(IlluminationMap, In.TexCoord).r;\n"
" DiffuseLight += (StaticDiffuseLight * Illumination);\n"
" SpecularLight += (StaticSpecularLight * Illumination);\n"
" #endif\n"
" #ifndef ALLOW_OVERBLENDING\n"
" DiffuseLight = saturate(DiffuseLight);\n"
" SpecularLight = saturate(SpecularLight);\n"
" #endif\n"
"    /* Get diffuse and specular colors */\n"
" float4 DiffuseAndSpecular = tex2D(DiffuseAndSpecularMap, In.TexCoord);\n"
"    DiffuseLight *= DiffuseAndSpecular.rgb;\n"
"    SpecularLight *= DiffuseAndSpecular.a;\n"
"    /* Compute final deferred shaded pixel color */\n"
"    Out.Color.rgb   = DiffuseLight + SpecularLight;\n"
"    Out.Color.a     = 1.0;\n"
" #ifdef BLOOM_FILTER\n"
"    Out.Specular.rgb    = SpecularLight;\n"
"    Out.Specular.a      = 1.0;\n"
"    #endif\n"
"    #ifdef DEBUG_GBUFFER\n"
" #   ifdef DEBUG_GBUFFER_WORLDPOS\n"
" WorldPos += 0.01;\n"
"    Out.Color.rgb = WorldPos - floor(WorldPos);\n"
" #   else\n"
"    //Out.Color.rgb = (float3)(NormalAndDepthDist.a - floor(NormalAndDepthDist.a));\n"
" Out.Color.rgb = NormalAndDepthDist.xyz * (float3)0.5 + (float3)0.5;\n"
" #   endif\n"
"    #endif\n"
"    return Out;\n"
"}\n"
