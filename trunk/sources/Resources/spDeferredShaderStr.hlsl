"/*\n"
" * Deferred D3D11 shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"/*\n"
"\n"
"Compilation options:\n"
"\n"
"SHADOW_MAPPING  -> Enables shadow mapping.\n"
"BLOOM_FILTER    -> Enables bloom filter.\n"
"FLIP_Y_AXIS     -> Flips Y axis for OpenGL FBOs.\n"
"DEBUG_GBUFFER   -> Renders g-buffer for debugging.\n"
"\n"
"*/\n"
"\n"
"/*\n"
" * Deferred shader header file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"/* === Macros === */\n"
"\n"
"#ifndef MAX_LIGHTS\n"
"#    define MAX_LIGHTS           35\n"
"#endif\n"
"#ifndef MAX_EX_LIGHTS\n"
"#    define MAX_EX_LIGHTS        15\n"
"#endif\n"
"\n"
"#ifndef NUM_JITTERD_OFFSETS\n"
"#    define NUM_JITTERD_OFFSETS    20\n"
"#endif\n"
"\n"
"#define LIGHT_DIRECTIONAL       0\n"
"#define LIGHT_POINT             1\n"
"#define LIGHT_SPOT              2\n"
"\n"
"#define AMBIENT_LIGHT_FACTOR    0.0//0.1 //!< Should be in the range [0.0 .. 1.0].\n"
"#define LIGHT_CUTOFF            0.0\n"
"\n"
"#define MIN_VARIANCE            1.0\n"
"#define VPL_SINGULARITY_CLAMP    0.1\n"
"\n"
"#ifdef TILED_SHADING\n"
"#    ifndef TILED_LIGHT_GRID_NUM_X\n"
"#        define TILED_LIGHT_GRID_NUM_X 8\n"
"#    endif\n"
"#    ifndef TILED_LIGHT_GRID_NUM_Y\n"
"#        define TILED_LIGHT_GRID_NUM_Y 8\n"
"#    endif\n"
"#    ifndef TILED_LIGHT_GRID_WIDTH\n"
"#        define TILED_LIGHT_GRID_WIDTH 32\n"
"#    endif\n"
"#    ifndef TILED_LIGHT_GRID_HEIGHT\n"
"#        define TILED_LIGHT_GRID_HEIGHT 32\n"
"#    endif\n"
"#endif\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SLight\n"
"{\n"
"    float4 PositionAndInvRadius;    //!< Position (xyz), Inverse Radius (w).\n"
"    float3 Color;                   //!< Light color (used for diffuse and specular).\n"
"    float Pad0;\n"
"    int Type;                       //!< 0 -> Directional light, 1 -> Point light, 2 -> Spot light.\n"
"    int ShadowIndex;                //!< Shadow map layer index.\n"
"    int UsedForLightmaps;            //!< Specifies whether this light is used for lightmaps or not.\n"
"    int Pad2;\n"
"};\n"
"\n"
"struct SLightEx\n"
"{\n"
"    float4x4 ViewProjection;    //!< Spot-/ directional view-projection matrix.\n"
"    #ifdef GLOBAL_ILLUMINATION\n"
"    float4x4 InvViewProjection;    //!< Inverse view-projection matrix.\n"
"    #endif\n"
"    float3 Direction;              //!< Spot-/ directional light direction.\n"
"    float Pad0;\n"
"    float SpotTheta;            //!< First spot cone angle (in radian).\n"
"    float SpotPhiMinusTheta;    //!< Second minus first spot cone angle (in radian).\n"
"    float Pad1[2];\n"
"};\n"
"/*\n"
" * Deferred shader procedures file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"float GetAngle(in float3 a, in float3 b)\n"
"{\n"
"    return acos(dot(a, b));\n"
"}\n"
"\n"
"float GetSpotLightIntensity(in float3 LightDir, in SLightEx LightEx)\n"
"{\n"
"    /* Compute spot light cone */\n"
"    float Angle = GetAngle(LightDir, LightEx.Direction);\n"
"    float ConeAngleLerp = (Angle - LightEx.SpotTheta) / LightEx.SpotPhiMinusTheta;\n"
"    \n"
"    return saturate(1.0 - ConeAngleLerp);\n"
"}\n"
"\n"
"#ifdef SHADOW_MAPPING\n"
"\n"
"/**\n"
"Chebyshev inequality function for VSM (variance shadow maps)\n"
"see GPUGems3 at nVIDIA for more details: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html\n"
"*/\n"
"float ChebyshevUpperBound(in float2 Moments, in float t)\n"
"{\n"
"    /* One-tailed inequality valid if t > Moments.x */\n"
"    float p = step(t, Moments.x);\n"
"    \n"
"    /* Compute variance */\n"
"    float Variance = Moments.y - (Moments.x*Moments.x);\n"
"    Variance = max(Variance, MIN_VARIANCE);\n"
"    \n"
"    /* Compute probabilistic upper bound. */\n"
"    float d = t - Moments.x;\n"
"    float p_max = Variance / (Variance + d*d);\n"
"    \n"
"    return max(p, p_max);\n"
"}\n"
"\n"
"float LinStep(in float min, in float max, in float v)\n"
"{\n"
"    return saturate((v - min) / (max - min));\n"
"}\n"
"\n"
"float ReduceLightBleeding(in float p_max, in float Amount)\n"
"{\n"
"    /* remove the [0, amount] ail and linearly rescale [amount, 1] */\n"
"    return LinStep(Amount, 1.0, p_max);\n"
"}\n"
"\n"
"float ShadowContribution(in float2 Moments, in float LightDistance)\n"
"{\n"
"    /* Compute the Chebyshev upper bound */\n"
"    float p_max = ChebyshevUpperBound(Moments, LightDistance);\n"
"    return ReduceLightBleeding(p_max, 0.6);\n"
"}\n"
"\n"
"//! World position projection function.\n"
"float4 Projection(in float4x4 ProjectionMatrix, in float4 WorldPos)\n"
"{\n"
"    float4 ProjectedPoint = ProjectionMatrix * WorldPos;\n"
"\n"
"    ProjectedPoint.xy = (ProjectedPoint.xy / float2(ProjectedPoint.w) + float2(1.0)) * float2(0.5);\n"
"\n"
"    return ProjectedPoint;\n"
"}\n"
"\n"
"#endif\n"
"\n"
"#ifdef SHADOW_MAPPING\n"
"\n"
"#    ifdef GLOBAL_ILLUMINATION\n"
"\n"
"//! Virtual point light shading function.\n"
"bool ComputeVPLShading(in float3 WorldPos, in float3 Normal, in float3 IndirectPoint, inout float IntensityIL)\n"
"{\n"
"    /* Check if VPL is visible to pixel */\n"
"    float3 IndirectDir = IndirectPoint - WorldPos;\n"
"    \n"
"    if (dot(Normal, IndirectDir) <= 0.0)\n"
"        return false;\n"
"    \n"
"    /* Compute light attenuation */\n"
"    float DistanceIL = distance(WorldPos, IndirectPoint);\n"
"    \n"
"    float AttnLinearIL    = DistanceIL;// ... * VPLRadius;\n"
"    float AttnQuadraticIL = AttnLinearIL * DistanceIL;\n"
"    \n"
"    IntensityIL = saturate(1.0 / (1.0 + AttnLinearIL + AttnQuadraticIL));// - LIGHT_CUTOFF);\n"
"    \n"
"    /* Compute phong shading for indirect light */\n"
"    float NdotIL = saturate(dot(Normal, normalize(IndirectDir)));\n"
"    \n"
"    /* Clamp intensity to avoid singularities in VPLs */\n"
"    IntensityIL = min(VPL_SINGULARITY_CLAMP, IntensityIL * NdotIL) * GIReflectivity;\n"
"    \n"
"    return true;\n"
"}\n"
"\n"
"//! Global illumination function for spot lights.\n"
"void ComputeVPLShadingSpotLight(\n"
"    in SLight Light, in SLightEx LightEx, in float3 WorldPos, in float3 Normal, inout float3 Diffuse)\n"
"{\n"
"    /* Compute VPLs (virtual point lights) */\n"
"    float3 IndirectTexCoord = float3(0.0, 0.0, float(Light.ShadowIndex));\n"
"    \n"
"    for (int i = 0; i < 100; ++i)\n"
"    {\n"
"        /* Get VPL offset */\n"
"        IndirectTexCoord.xy = VPLOffsets[i].xy;\n"
"        \n"
"        /* Sample indirect light distance */\n"
"        float IndirectDist = tex2DArray(DirLightShadowMaps, IndirectTexCoord).r;\n"
"        \n"
"        /* Get the indirect light's position */\n"
"        float4 LightRay = float4(IndirectTexCoord.x*2.0 - 1.0, 1.0 - IndirectTexCoord.y*2.0, 1.0, 1.0);\n"
"        LightRay = normalize(LightEx.InvViewProjection * LightRay);\n"
"        float3 IndirectPoint = Light.PositionAndInvRadius.xyz + LightRay.xyz * CAST(float3, IndirectDist);\n"
"        \n"
"        /* Shade indirect light */\n"
"        float IntensityIL = 0.0;\n"
"        \n"
"        if (ComputeVPLShading(WorldPos, Normal, IndirectPoint, IntensityIL))\n"
"        {\n"
"            /* Sample indirect light color */\n"
"            float3 IndirectColor = tex2DArray(DirLightDiffuseMaps, IndirectTexCoord).rgb;\n"
"            \n"
"            /* Apply VPL shading */\n"
"            IndirectColor *= CAST(float3, IntensityIL);\n"
"            Diffuse += IndirectColor;\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"//! Low-resolution light shading function for global illumination.\n"
"void ComputeLowResLightShadingVPL(\n"
"    in SLight Light, in SLightEx LightEx, in float3 WorldPos,\n"
"    in float3 Normal, inout float3 Diffuse)\n"
"{\n"
"    /* Compute diffuse color */\n"
"    Diffuse = CAST(float3, 0.0);\n"
"    float3 Specular = CAST(float3, 0.0);\n"
"    \n"
"    /* Apply shadow */\n"
"    if (Light.ShadowIndex != -1)\n"
"    {\n"
"        if (Light.Type == LIGHT_POINT)\n"
"        {\n"
"            //todo\n"
"        }\n"
"        else if (Light.Type == LIGHT_SPOT)\n"
"            ComputeVPLShadingSpotLight(Light, LightEx, WorldPos, Normal, Diffuse);\n"
"    }\n"
"    \n"
"    Diffuse *= Light.Color;\n"
"}\n"
"\n"
"#    endif\n"
"\n"
"#endif\n"
"\n"
"//! Main light shading function.\n"
"void ComputeLightShading(\n"
"    in SLight Light, in SLightEx LightEx,\n"
"    in float3 WorldPos, in float3 Normal, in float Shininess, in float3 ViewRay,\n"
"    #ifdef HAS_LIGHT_MAP\n"
"    inout float3 StaticDiffuseColor, inout float3 StaticSpecularColor,\n"
"    #endif\n"
"    inout float3 DiffuseColor, inout float3 SpecularColor)\n"
"{\n"
"    /* Compute light direction vector */\n"
"    float3 LightDir = CAST(float3, 0.0);\n"
"    \n"
"    if (Light.Type != LIGHT_DIRECTIONAL)\n"
"        LightDir = normalize(WorldPos - Light.PositionAndInvRadius.xyz);\n"
"    else\n"
"        LightDir = LightEx.Direction;\n"
"    \n"
"    /* Compute phong shading */\n"
"    float NdotL = max(AMBIENT_LIGHT_FACTOR, dot(Normal, -LightDir));\n"
"    \n"
"    /* Compute light attenuation */\n"
"    float Distance = distance(WorldPos, Light.PositionAndInvRadius.xyz);\n"
"    \n"
"    float AttnLinear    = Distance * Light.PositionAndInvRadius.w;\n"
"    float AttnQuadratic = AttnLinear * Distance;\n"
"    \n"
"    float Intensity = saturate(1.0 / (1.0 + AttnLinear + AttnQuadratic) - LIGHT_CUTOFF);\n"
"    \n"
"    if (Light.Type == LIGHT_SPOT)\n"
"        Intensity *= GetSpotLightIntensity(LightDir, LightEx);\n"
"    \n"
"    /* Compute diffuse color */\n"
"    float3 Diffuse = CAST(float3, Intensity * NdotL);\n"
"    \n"
"    /* Compute specular color */\n"
"    float3 Reflection = normalize(reflect(LightDir, Normal));\n"
"    \n"
"    float NdotHV = -dot(ViewRay, Reflection);\n"
"    \n"
"    float3 Specular = Light.Color * CAST(float3, Intensity * pow(max(0.0, NdotHV), Shininess));\n"
"    \n"
"    #ifdef SHADOW_MAPPING\n"
"    \n"
"    /* Apply shadow */\n"
"    if (Light.ShadowIndex != -1)\n"
"    {\n"
"        if (Light.Type == LIGHT_POINT)\n"
"        {\n"
"            //todo\n"
"        }\n"
"        else if (Light.Type == LIGHT_SPOT)\n"
"        {\n"
"            /* Get shadow map texture coordinate */\n"
"            float4 ShadowTexCoord = Projection(LightEx.ViewProjection, float4(WorldPos, 1.0));\n"
"            \n"
"            if ( ShadowTexCoord.x >= 0.0 && ShadowTexCoord.x <= 1.0 &&\n"
"                 ShadowTexCoord.y >= 0.0 && ShadowTexCoord.y <= 1.0 &&\n"
"                 ShadowTexCoord.z > 0.0 )\n"
"            {\n"
"                /* Adjust texture coordinate */\n"
"                ShadowTexCoord.y = 1.0 - ShadowTexCoord.y;\n"
"                ShadowTexCoord.z = float(Light.ShadowIndex);\n"
"                ShadowTexCoord.w = 2.0;//Distance*0.25;\n"
"                \n"
"                /* Sample moments from shadow map */\n"
"                float2 Moments = tex2DArrayLod(DirLightShadowMaps, ShadowTexCoord).ra;\n"
"                \n"
"                /* Compute shadow contribution */\n"
"                float Shadow = ShadowContribution(Moments, Distance);\n"
"                \n"
"                Diffuse *= CAST(float3, Shadow);\n"
"                Specular *= CAST(float3, Shadow);\n"
"            }\n"
"            \n"
"            #if defined(GLOBAL_ILLUMINATION) && !defined(USE_LOWRES_VPL_SHADING)\n"
"            \n"
"            ComputeVPLShadingSpotLight(Light, LightEx, WorldPos, Normal, Diffuse);\n"
"            \n"
"            #endif\n"
"        }\n"
"    }\n"
"    \n"
"    #endif\n"
"    \n"
"    Diffuse *= Light.Color;\n"
"    \n"
"    /* Add light color */\n"
"    #ifdef HAS_LIGHT_MAP\n"
"    \n"
"    if (Light.UsedForLightmaps != 0)\n"
"    {\n"
"        StaticDiffuseColor += Diffuse;\n"
"        StaticSpecularColor += Specular;\n"
"    }\n"
"    else\n"
"    {\n"
"        DiffuseColor += Diffuse;\n"
"        SpecularColor += Specular;\n"
"    }\n"
"    \n"
"    #else\n"
"    \n"
"    DiffuseColor += Diffuse;\n"
"    SpecularColor += Specular;\n"
"    \n"
"    #endif\n"
"}\n"
"\n"
"/*\n"
" * ======= Vertex shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SVertexInput\n"
"{\n"
"    float2 Position : POSITION;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"};\n"
"\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position : SV_Position;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    float4 ViewRay : TEXCOORD1;\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"cbuffer BufferMain : register(b0)\n"
"{\n"
"    float4x4 ProjectionMatrix;\n"
"    float4x4 InvViewProjection;\n"
"    float4x4 WorldMatrix;       //!< 2D quad world matrix.\n"
"    float3 ViewPosition;        //!< Global camera position.\n"
"};\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"void Frustum(inout float4 v)\n"
"{\n"
"    v.x = (v.x - 0.5) * 2.0;\n"
"    v.y = (v.y - 0.5) * 2.0;\n"
"}\n"
"\n"
"SVertexOutput VertexMain(SVertexInput In)\n"
"{\n"
"    SVertexOutput Out = (SVertexOutput)0;\n"
"    \n"
"    /* Process vertex transformation */\n"
"    float2 Coord = mul((float2x2)WorldMatrix, In.Position);\n"
"\n"
"    Out.Position = mul(ProjectionMatrix, float4(Coord.x, Coord.y, 0.0, 1.0));\n"
"\n"
"    /* Process vertex transformation for position and normal */\n"
"    Out.TexCoord = In.TexCoord;\n"
"    \n"
"    /* Pre-compute view ray */\n"
"    Out.ViewRay = float4(In.TexCoord.x, 1.0 - In.TexCoord.y, 1.0, 1.0);\n"
"    \n"
"    Frustum(Out.ViewRay);\n"
"    \n"
"    Out.ViewRay = mul(InvViewProjection, Out.ViewRay);\n"
"\n"
"    return Out;\n"
"}\n"
"\n"
"\n"
"/*\n"
" * ======= Pixel shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SPixelOutput\n"
"{\n"
"    float4 Color : SV_Target0;\n"
"    #ifdef BLOOM_FILTER\n"
"    float4 Specular : SV_Target1;\n"
"    #endif\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"SAMPLER2D(DiffuseAndSpecularMap, 0);\n"
"SAMPLER2D(NormalAndDepthMap, 1);\n"
"\n"
"#ifdef SHADOW_MAPPING\n"
"SAMPLER2DARRAY(DirLightShadowMaps, 2);\n"
"SAMPLERCUBEARRAY(PointLightShadowMaps, 3);\n"
"#endif\n"
"\n"
"#ifdef TILED_SHADING\n"
"\n"
"// Dynamic tile light index list and 2D tile grid (for tiled deferred shading)\n"
"tbuffer TileLightIndexList : register(t4)\n"
"{\n"
"    int TileLightIndices[100];\n"
"};\n"
"\n"
"#if 1//!!!\n"
"#define TILED_LIGHT_GRID_NUM_X 8\n"
"#define TILED_LIGHT_GRID_NUM_Y 8\n"
"#endif\n"
"\n"
"cbuffer BufferLightGrid : register(b5)\n"
"{\n"
"    int4 LightGrid[TILED_LIGHT_GRID_NUM_X * TILED_LIGHT_GRID_NUM_Y];\n"
"};\n"
"\n"
"#endif\n"
"\n"
"cbuffer BufferShading : register(b1)\n"
"{\n"
"    float3 AmbientColor : packoffset(c0);    //!< Ambient light color.\n"
"    int LightCount        : packoffset(c0.w);    //!< Count of light sources.\n"
"};\n"
"\n"
"cbuffer BufferLight : register(b2)\n"
"{\n"
"    SLight Lights[MAX_LIGHTS];\n"
"};\n"
"\n"
"cbuffer BufferLightEx : register(b3)\n"
"{\n"
"    SLightEx LightsEx[MAX_EX_LIGHTS];\n"
"};\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"SPixelOutput PixelMain(SVertexOutput In)\n"
"{\n"
"    SPixelOutput Out = (SPixelOutput)0;\n"
"\n"
"    /* Get texture colors */\n"
"    float4 DiffuseAndSpecular = tex2D(DiffuseAndSpecularMap, In.TexCoord);\n"
"    float4 NormalAndDepthDist = tex2D(NormalAndDepthMap, In.TexCoord);\n"
"\n"
"    #if 1//!!!\n"
"    NormalAndDepthDist.xyz = normalize(NormalAndDepthDist.xyz);\n"
"    #endif\n"
"    \n"
"    /* Compute global pixel position (world space) */\n"
"    float3 ViewRayNorm = normalize(In.ViewRay.xyz);\n"
"    float3 WorldPos = ViewPosition + ViewRayNorm * (float3)NormalAndDepthDist.a;\n"
"    \n"
"    /* Compute light shading */\n"
"    #ifdef HAS_LIGHT_MAP\n"
"    float3 StaticDiffuseLight = 0.0;\n"
"    float3 StaticSpecularLight = 0.0;\n"
"    #endif\n"
"    \n"
"    float3 DiffuseLight = AmbientColor;\n"
"    float3 SpecularLight = 0.0;\n"
"    \n"
"    for (int i = 0, j = 0; i < LightCount; ++i)\n"
"    {\n"
"        ComputeLightShading(\n"
"            Lights[i], LightsEx[j], WorldPos.xyz, NormalAndDepthDist.xyz, 90.0, ViewRayNorm,\n"
"            #ifdef HAS_LIGHT_MAP\n"
"            StaticDiffuseLight, StaticSpecularLight,\n"
"            #endif\n"
"            DiffuseLight, SpecularLight\n"
"        );\n"
"        \n"
"        if (Lights[i].Type != LIGHT_POINT)\n"
"            ++j;\n"
"    }\n"
"    \n"
"    #if 0//!!!\n"
"    SpecularLight += (float3)((float)(LightGrid[0] * TileLightIndices[0]) * 0.001);\n"
"    #endif\n"
"    \n"
"    #ifdef HAS_LIGHT_MAP\n"
"    \n"
"    /* Mix light shading with light-map illumination */\n"
"    float Illumination = tex2D(IlluminationMap, TexCoord).r;\n"
"    \n"
"    DiffuseLight += (StaticDiffuseLight * Illumination);\n"
"    SpecularLight += (StaticSpecularLight * Illumination);\n"
"    \n"
"    #endif\n"
"    \n"
"    #ifndef ALLOW_OVERBLENDING\n"
"    DiffuseLight = saturate(DiffuseLight);\n"
"    SpecularLight = saturate(SpecularLight);\n"
"    #endif\n"
"    \n"
"    DiffuseLight *= DiffuseAndSpecular.rgb;\n"
"    SpecularLight *= DiffuseAndSpecular.a;\n"
"    \n"
"    /* Compute final deferred shaded pixel color */\n"
"    Out.Color.rgb   = DiffuseLight + SpecularLight;\n"
"    Out.Color.a     = 1.0;\n"
"    \n"
"    #ifdef BLOOM_FILTER\n"
"    Out.Specular.rgb    = SpecularLight;\n"
"    Out.Specular.a      = 1.0;\n"
"    #endif\n"
"\n"
"    #if 0//!!!\n"
"    Out.Color.rgb = NormalAndDepthDist.xyz * 0.5 + 0.5;\n"
"    #endif\n"
"\n"
"    #ifdef DEBUG_GBUFFER\n"
"    \n"
"    #   ifdef DEBUG_GBUFFER_WORLDPOS\n"
"    WorldPos.xyz += 0.01;\n"
"    Out.Color.rgb = WorldPos.xyz - floor(WorldPos.xyz);\n"
"    #   else\n"
"    Out.Color.rgb = float3(NormalAndDepthDist.a - floor(NormalAndDepthDist.a));\n"
"    #   endif\n"
"    \n"
"    #endif\n"
"\n"
"    return Out;\n"
"}\n"
