"/*\n"
" * VPL generator D3D11 compute shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"/*\n"
" * Deferred shader header file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"#ifndef MAX_LIGHTS\n"
"# define MAX_LIGHTS            35\n"
"#endif\n"
"#ifndef MAX_EX_LIGHTS\n"
"# define MAX_EX_LIGHTS         15\n"
"#endif\n"
"#ifndef NUM_JITTERD_OFFSETS\n"
"# define NUM_JITTERD_OFFSETS  20\n"
"#endif\n"
"#define LIGHT_DIRECTIONAL        0\n"
"#define LIGHT_POINT              1\n"
"#define LIGHT_SPOT               2\n"
"#define AMBIENT_LIGHT_FACTOR     0.0/*0.1*/ //!< Should be in the range [0.0 .. 1.0].\n"
"#define LIGHT_CUTOFF    0.01\n"
"#define MIN_VARIANCE             1.0\n"
"#define EOL       0xFFFFFFFF //!< Id for 'end-of-linked-list'\n"
"#define VPL_SINGULARITY_CLAMP  0.1\n"
"#define VPL_COUNT     100\n"
"#define SHININESS_FACTOR   90.0\n"
"#ifdef TILED_SHADING\n"
"# define TILED_LIGHT_GRID_WIDTH 32\n"
"# define TILED_LIGHT_GRID_HEIGHT 32\n"
"#endif\n"
"struct SLightNode\n"
"{\n"
" uint LightID; //!< SLight index.\n"
" uint Next;  //!< Next SLightNode index. 'EOL' if end of linked list.\n"
"};\n"
"struct SLight\n"
"{\n"
"    float4 PositionAndInvRadius;    //!< Position (xyz), Inverse Radius (w).\n"
"    float3 Color;                   //!< Light color (used for diffuse and specular).\n"
" float Pad0;\n"
"    int Type;                       //!< 0 -> Directional light, 1 -> Point light, 2 -> Spot light.\n"
"    int ShadowIndex;                //!< Shadow map layer index. -1 -> no shadow map.\n"
" int UsedForLightmaps;      //!< Specifies whether this light is used for lightmaps or not.\n"
" int ExID;      //!< Index to the associated 'SLightEx' element.\n"
"};\n"
"struct SLightEx\n"
"{\n"
"    float4x4 ViewProjection;    //!< Spot-/ directional view-projection matrix.\n"
" float4x4 InvViewProjection; //!< Inverse view-projection matrix.\n"
"    float3 Direction;           //!< Spot-/ directional light direction.\n"
" float Pad0;\n"
"    float SpotTheta;   //!< First spot cone angle (in radian).\n"
"    float SpotPhiMinusTheta; //!< Second minus first spot cone angle (in radian).\n"
" float Pad1[2];\n"
"};\n"
"#ifdef GLOBAL_ILLUMINATION\n"
"struct SVPL\n"
"{\n"
" float3 WorldPos;\n"
" float3 Normal;\n"
" float3 Color;\n"
"};\n"
"#endif\n"
"/*\n"
" * ======= Compute shader: =======\n"
" */\n"
"#define NUM_MAX_LIGHTS  16\n"
"#define THREAD_GROUP_NUM_X 8\n"
"#define THREAD_GROUP_NUM_Y 8\n"
"#define THREAD_GROUP_SIZE (THREAD_GROUP_NUM_X * THREAD_GROUP_NUM_Y)\n"
"cbuffer BufferMain : register(b0)\n"
"{\n"
" uint NumVPLsPerLight : packoffset(c0);\n"
" uint3 NumThreadGroups : packoffset(c0.y);\n"
"};\n"
"cbuffer BufferLights : register(b1)\n"
"{\n"
"    SLight Lights[NUM_MAX_LIGHTS];\n"
"    SLightEx LightsEx[NUM_MAX_LIGHTS];\n"
"};\n"
"RWStructuredBuffer<SVPL> VPLList : register(u0);\n"
"Texture2DArray DirLightShadowMaps : register(t0);\n"
"TextureCubeArray PointLightShadowMaps : register(t1);\n"
"Texture2DArray DirLightDiffuseMaps : register(t3);\n"
"TextureCubeArray PointLightDiffuseMaps : register(t4);\n"
"void GenerateVPL(SLight Lit, SLightEx LitEx, uint Index)\n"
"{\n"
" SVPL VPL;\n"
" VPLList[Index] = VPL;\n"
"}\n"
"[numthreads(THREAD_GROUP_NUM_X, THREAD_GROUP_NUM_Y, 1)]\n"
"void ComputeMain(\n"
" uint3 GroupId : SV_GroupID,\n"
" uint LocalIndex : SV_GroupIndex)\n"
"{\n"
" uint LightIndex = GroupId.y;\n"
" SLight Lit = Lights[LightIndex];\n"
" SLightEx LitEx = LightsEx[LightIndex];\n"
" uint VPLIndex = GroupId.x * THREAD_GROUP_SIZE + LocalIndex;\n"
" if (VPLIndex < NumVPLsPerLight)\n"
" {\n"
"  VPLIndex += LightIndex * NumVPLsPerLight;\n"
"  GenerateVPL(Lit, LitEx, VPLIndexOffset + i);\n"
" }\n"
"}\n"
