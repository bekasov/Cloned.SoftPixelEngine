"/*\n"
" * D3D11 default drawing shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"Texture2D Texture : register(t0);\n"
"SamplerState Sampler : register(s0);\n"
"cbuffer BufferVS : register(b0)\n"
"{\n"
"    float4x4 ProjectionMatrix;  //!< Projection matrix.\n"
"    float4x4 WorldMatrix;       //!< Image transformation matrix.\n"
"    float4 TextureTransform;    //!< Texture offset (XY), Texture scaling (ZW).\n"
"    float4 Position;            //!< Image origin (XY), Image offset (ZW).\n"
"};\n"
"cbuffer BufferPS : register(b1)\n"
"{\n"
"    float4 Color;\n"
"    int UseTexture;\n"
"};\n"
"struct SVertexInput\n"
"{\n"
"    float2 Position : POSITION;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"};\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position : SV_Position;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"};\n"
"SVertexOutput VertexMain(SVertexInput In)\n"
"{\n"
"    SVertexOutput Out = (SVertexOutput)0;\n"
"    // Process vertex coordinate\n"
"    float2 Coord = Position.xy + mul(WorldMatrix, float4(Position.zw + In.Position, 0.0, 1.0)).xy;\n"
"    Out.Position = mul(ProjectionMatrix, float4(Coord.x, Coord.y, 0.0, 1.0));\n"
"    // Process texture coordinate\n"
"    Out.TexCoord = TextureTransform.xy + In.TexCoord * TextureTransform.zw;\n"
"    return Out;\n"
"}\n"
"float4 PixelMain(SVertexOutput In) : SV_Target0\n"
"{\n"
"    return UseTexture != 0 ? Texture.Sample(Sampler, In.TexCoord) * Color : Color;\n"
"}\n"
