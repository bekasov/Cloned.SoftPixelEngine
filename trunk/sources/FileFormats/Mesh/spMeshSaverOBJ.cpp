/*
 * Mesh saver OBJ file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

#include "FileFormats/Mesh/spMeshSaverOBJ.hpp"

#ifdef SP_COMPILE_WITH_MESHSAVER_OBJ


#include "Base/spTimer.hpp"
#include "Platform/spSoftPixelDevice.hpp"


namespace sp
{
namespace scene
{


MeshSaverOBJ::MeshSaverOBJ() : MeshSaver()
{
}
MeshSaverOBJ::~MeshSaverOBJ()
{
}

bool MeshSaverOBJ::saveMesh(Mesh* Model, const io::stringc &Filename)
{
    if (!openSaveFile(Model, Filename))
        return false;
    
    saveModelData();
    
    return true;
}


/*
 * ======= Private: =======
 */

void MeshSaverOBJ::saveModelData()
{
    /* Temporary memory */
    dim::vector3df Coord, Normal;
    dim::point2df TexCoord;
    u32 Indices[3];
    
    u32 i, j, c;
    
    u32 CountOfVertices = 1;
    
    /* Write mesh object */
    File_->writeStringN("# Wavefront Object [ generated by the SoftPixel Engine at " + io::Timer::getTime() + " ]");
    
    if (Mesh_->getName().size())
    {
        File_->writeStringN(io::stringc("o ") + io::stringc(Mesh_->getName()));
        File_->writeStringN("");
    }
    
    for (i = 0; i < Mesh_->getMeshBufferCount(); ++i)
    {
        
        Surface_ = Mesh_->getMeshBuffer(i);
        
        c = Surface_->getVertexCount();
        
        /* Write surface */
        if (Surface_->getName().size())
        {
            File_->writeStringN("g " + Surface_->getName());
            File_->writeStringN("");
        }
        
        /* Write vertices */
        for (j = 0; j < c; ++j)
        {
            Coord = Surface_->getVertexCoord(j);
            
            writeValueList<f32>("v", &Coord.X, 3);
        }
        
        /* Write texture coordinates */
        for (j = 0; j < c; ++j)
        {
            TexCoord = Surface_->getVertexTexCoord(j);
            TexCoord.Y = -TexCoord.Y;
            
            writeValueList<f32>("vt", &TexCoord.X, 2);
        }
        
        /* Write normals */
        for (j = 0; j < c; ++j)
        {
            Normal = Surface_->getVertexNormal(j);
            
            writeValueList<f32>("vn", &Normal.X, 3);
        }
        
        /* Write faces */
        for (j = 0; j < Surface_->getTriangleCount(); ++j)
        {
            Surface_->getTriangleIndices(j, Indices);
            
            Indices[0] += CountOfVertices;
            Indices[1] += CountOfVertices;
            Indices[2] += CountOfVertices;
            
            writeValueListFace<u32>(Indices);
        }
        
        CountOfVertices += c;
        
    } // next surface
}


} // /namespace scene

} // /namespace sp


#endif



// ================================================================================
