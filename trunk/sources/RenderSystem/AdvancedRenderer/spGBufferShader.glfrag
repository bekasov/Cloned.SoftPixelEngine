/*
 * GBuffer GLSL fragment shader file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

#version 120

#include <softpixelengine>

/*

Compilation options:

NORMAL_MAPPING      -> Enables normal mapping.
PARALLAX_MAPPING    -> Enables parallax-occlusion mapping (Requires NORMAL_MAPPING to be enabled).
NORMALMAP_XYZ_H		-> Normal map contains vector data (xyz in RGB) and height-field data (h in Alpha-Channel). When this is defined, no height-map is used for parallax-mapping.
HAS_SPECULAR_MAP    -> Specifies that a specular is used.
HAS_LIGHT_MAP		-> Specifies that a lightmap is used.

*/

#ifdef PARALLAX_MAPPING
#	ifdef GL_ARB_shader_texture_lod
#		extension GL_ARB_shader_texture_lod : enable
#	else
#		undef PARALLAX_MAPPING
#	endif
#endif

/* === Uniforms === */

uniform sampler2D DiffuseMap;

#ifdef HAS_SPECULAR_MAP
uniform sampler2D SpecularMap;
#endif

#ifdef HAS_LIGHT_MAP
uniform sampler2D LightMap;
uniform bool EnableLightMap;
#endif

#ifdef NORMAL_MAPPING

uniform sampler2D NormalMap;
#   if defined(PARALLAX_MAPPING) && !defined(NORMALMAP_XYZ_H)
// Contains only height-field information (in the alpha channel) when PARALLAX_MAPPING is enabled
uniform sampler2D HeightMap;
#   endif

#   ifdef PARALLAX_MAPPING

uniform bool EnablePOM;
uniform int MinSamplesPOM;
uniform int MaxSamplesPOM;
uniform float HeightMapScale;
uniform float ParallaxViewRange;

#   endif

#endif

uniform float SpecularFactor;

uniform float3 ViewPosition;    //!< Global camera position.

/* === Varyings === */

/*#if GLSL_VERSION >= 150
layout(early_fragment_tests) in;
#endif*/

varying float3 WorldPos;
varying float3 Normal;
varying float2 TexCoord;

#ifdef HAS_LIGHT_MAP
varying float2 LMTexCoord;
#endif

#ifdef NORMAL_MAPPING
varying float3 Tangent;
varying float3 Binormal;
#   ifdef PARALLAX_MAPPING
varying float4 ViewVertexDirAndDepth;
#   endif
#endif


/* === Functions === */

void main()
{
    float4 DiffuseAndSpecular = float4(0.0);
    float4 NormalAndDepth = float4(0.0);
	
	#include "spGBufferShaderMain.shader"
	
	/* Pass final output */
    gl_FragData[0] = DiffuseAndSpecular;
    gl_FragData[1] = NormalAndDepth;
	
	#ifdef HAS_LIGHT_MAP
	
	/* Sample illumination color */
	float Illumination = 1.0;
	
	if (EnableLightMap)
		Illumination = tex2D(LightMap, LMTexCoord).r;
	
	gl_FragData[2].r = Illumination;
	//DiffuseAndSpecular.rgb *= Illumination;//!!!
	
	#endif
	
	#if defined(DEBUG_GBUFFER) && defined(DEBUG_GBUFFER_TEXCOORDS)
	
	gl_FragData[0] = float4(
		TexCoord.x - floor(TexCoord.x),
		TexCoord.y - floor(TexCoord.y),
		0.0,
		1.0
	);
	
	#endif
}
