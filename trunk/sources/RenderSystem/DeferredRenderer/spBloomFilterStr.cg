"/*\n"
" * Bloom filter Cg shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"#define SAMPLE_COUNT 9\n"
"\n"
"/*\n"
" * ======= Vertex shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SVertexInput\n"
"{\n"
"    float3 Position : POSITION;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"};\n"
"\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position : POSITION;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform float4x4 ProjectionMatrix;\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"SVertexOutput VertexMain(SVertexInput In)\n"
"{\n"
"    SVertexOutput Out = (SVertexOutput)0;\n"
"    \n"
"    /* Process vertex transformation for position and normal */\n"
"    Out.Position = mul(ProjectionMatrix, float4(In.Position, 1));\n"
"    Out.TexCoord = In.TexCoord;\n"
"    \n"
"    return Out;\n"
"}\n"
"\n"
"\n"
"/*\n"
" * ======= Pixel shader: =======\n"
" */\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform sampler2D Tex : TEXUNIT0;\n"
"\n"
"uniform float2 BlurOffsets[SAMPLE_COUNT];\n"
"uniform float BlurWeights[SAMPLE_COUNT];\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"// Vertex render pass\n"
"float4 PixelMainHRP(float2 TexCoord : TEXCOORD0) : COLOR\n"
"{\n"
"    float4 Color = float4(0.0, 0.0, 0.0, 1.0);\n"
"\n"
"    for (int i = 0; i < SAMPLE_COUNT; ++i)\n"
"        Color.rgb += tex2D(Tex, TexCoord + float2(BlurOffsets[i].x, 0.0)).rgb * float3(BlurWeights[i]);\n"
"    \n"
"    return Color;\n"
"}\n"
"\n"
"// Horizontal render pass\n"
"float4 PixelMainVRP(float2 TexCoord : TEXCOORD0) : COLOR\n"
"{\n"
"    float4 Color = float4(0.0, 0.0, 0.0, 1.0);\n"
"\n"
"    for (int i = 0; i < SAMPLE_COUNT; ++i)\n"
"        Color.rgb += tex2D(Tex, TexCoord + float2(0.0, BlurOffsets[i].y)).rgb * float3(BlurWeights[i]);\n"
"    \n"
"    return Color;\n"
"}\n"
