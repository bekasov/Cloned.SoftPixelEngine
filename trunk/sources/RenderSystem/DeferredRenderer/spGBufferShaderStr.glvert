"/*\n"
" * GBuffer GLSL vertex shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"#version 120\n"
"\n"
"/*\n"
"\n"
"Compilation options:\n"
"\n"
"USE_TEXTURE_MATRIX  -> Enables texture matrix transformations for texture coordinates.\n"
"NORMAL_MAPPING      -> Enables normal mapping.\n"
"PARALLAX_MAPPING    -> Enables parallax-occlusion mapping (Requires NORMAL_MAPPING to be enabled).\n"
"HAS_LIGHT_MAP        -> Specifies that a lightmap is used.\n"
"\n"
"*/\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform mat4 WorldViewProjectionMatrix;\n"
"uniform mat4 WorldMatrix;\n"
"\n"
"#ifdef USE_TEXTURE_MATRIX\n"
"uniform mat4 TextureMatrix;\n"
"#endif\n"
"\n"
"uniform vec3 ViewPosition;    //!< Global camera position.\n"
"\n"
"/* === Varyings === */\n"
"\n"
"varying vec3 WorldPos;\n"
"varying vec3 Normal;\n"
"varying vec2 TexCoord;\n"
"\n"
"#ifdef HAS_LIGHT_MAP\n"
"varying vec2 LMTexCoord;\n"
"#endif\n"
"\n"
"#ifdef NORMAL_MAPPING\n"
"varying vec3 Tangent;\n"
"varying vec3 Binormal;\n"
"#   ifdef PARALLAX_MAPPING\n"
"varying vec4 ViewVertexDirAndDepth;\n"
"#   endif\n"
"#endif\n"
"\n"
"/* === Functions === */\n"
"\n"
"void main()\n"
"{\n"
"    /* Process vertex transformation for position and normal */\n"
"    gl_Position    = WorldViewProjectionMatrix * gl_Vertex;\n"
"    WorldPos       = vec3(WorldMatrix * gl_Vertex);\n"
"    Normal      = normalize(mat3(WorldMatrix) * gl_Normal);\n"
"    \n"
"    #ifdef NORMAL_MAPPING\n"
"    \n"
"    /* Process transformation for tangent space */\n"
"    Tangent     = normalize(mat3(WorldMatrix) * gl_MultiTexCoord1.xyz);\n"
"    Binormal    = normalize(mat3(WorldMatrix) * gl_MultiTexCoord2.xyz);\n"
"    \n"
"    #   ifdef PARALLAX_MAPPING\n"
"    mat3 NormalMatrix = mat3(\n"
"        Tangent,\n"
"        Binormal,\n"
"        Normal\n"
"    );\n"
"    \n"
"    ViewVertexDirAndDepth.xyz   = ViewPosition - WorldPos.xyz;\n"
"    ViewVertexDirAndDepth.xyz   = transpose(NormalMatrix) * ViewVertexDirAndDepth.xyz;\n"
"    ViewVertexDirAndDepth.y     = -ViewVertexDirAndDepth.y;\n"
"    \n"
"    ViewVertexDirAndDepth.w     = gl_Position.z;\n"
"    #   endif\n"
"\n"
"    #endif\n"
"    \n"
"    #ifdef USE_TEXTURE_MATRIX\n"
"    TexCoord = vec2(TextureMatrix * vec4(gl_MultiTexCoord0, 0.0, 1.0));\n"
"    #else\n"
"    TexCoord = gl_MultiTexCoord0.xy;\n"
"    #endif\n"
"    \n"
"    #ifdef HAS_LIGHT_MAP\n"
"    LMTexCoord = gl_MultiTexCoord3.xy;\n"
"    #endif\n"
"}\n"
