"/*\n"
" * GBuffer Cg shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"/*\n"
"\n"
"Compilation options:\n"
"\n"
"USE_TEXTURE_MATRIX      -> Enables texture matrix transformations for texture coordinates.\n"
"USE_NORMAL_MAPPING      -> Enables normal mapping.\n"
"USE_PARALLAX_MAPPING    -> Enables parallax-occlusion mapping (Requires USE_NORMAL_MAPPING to be enabled).\n"
"HAS_SPECULAR_MAP        -> Specifies that a specular is used.\n"
"\n"
"*/\n"
"\n"
"/*\n"
" * ======= Vertex shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SVertexInput\n"
"{\n"
"    float3 Position : POSITION;\n"
"    float3 Normal   : NORMAL;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    #ifdef USE_NORMAL_MAPPING\n"
"    float3 Binormal : TEXCOORD1;\n"
"    float3 Tangent  : TEXCOORD2;\n"
"    #endif\n"
"};\n"
"\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position : POSITION;\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    float3 Normal   : TEXCOORD1;\n"
"    #ifdef USE_NORMAL_MAPPING\n"
"    float3 Binormal : TEXCOORD2;\n"
"    float3 Tangent  : TEXCOORD3;\n"
"    #endif\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform float4x4 WorldViewProjectionMatrix;\n"
"uniform float3x3 NormalMatrix;\n"
"\n"
"#ifdef USE_TEXTURE_MATRIX\n"
"uniform float4x4 TextureMatrix;\n"
"#endif\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"void VertexMain(in SVertexInput In, out SVertexOutput Out)\n"
"{\n"
"    /* Process vertex transformation for position and normal */\n"
"    Out.Position = mul(WorldViewProjectionMatrix, float4(In.Position, 1));\n"
"    Out.Normal = mul(NormalMatrix, In.Normal);\n"
"\n"
"    #ifdef USE_NORMAL_MAPPING\n"
"    /* Process transformation for tangent space */\n"
"    Out.Binormal = mul(NormalMatrix, In.Binormal);\n"
"    Out.Tangent = mul(NormalMatrix, In.Tangent);\n"
"    #endif\n"
"\n"
"    #ifdef USE_TEXTURE_MATRIX\n"
"    Out.TexCoord = (float2)mul(TextureMatrix, float4(In.TexCoord, 0.0, 1.0));\n"
"    #else\n"
"    Out.TexCoord = In.TexCoord;\n"
"    #endif\n"
"}\n"
"\n"
"\n"
"/*\n"
" * ======= Pixel shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SPixelInput\n"
"{\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    float3 Normal   : TEXCOORD1;\n"
"    #ifdef USE_NORMAL_MAPPING\n"
"    float3 Binormal : TEXCOORD2;\n"
"    float3 Tangent  : TEXCOORD3;\n"
"    #endif\n"
"};\n"
"\n"
"struct SPixelOutput\n"
"{\n"
"    float4 DiffuseAndSpecular   : COLOR0;\n"
"    float3 Normal               : COLOR1;\n"
"    float Depth                 : DEPTH;\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform sampler2D DiffuseMap;\n"
"\n"
"#ifdef USE_NORMAL_MAPPING\n"
"\n"
"// Contains only height-field information (in the alpha channel) when USE_PARALLAX_MAPPING is enabled\n"
"uniform sampler2D NormalAndHeightMap;\n"
"\n"
"#   ifdef USE_PARALLAX_MAPPING\n"
"uniform float MinSamplesPOM;\n"
"uniform float MaxSamplesPOM;\n"
"#   endif\n"
"\n"
"#endif\n"
"\n"
"#ifdef HAS_SPECULAR_MAP\n"
"uniform sampler2D SpecularMap;\n"
"#endif\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"void PixelMain(in SPixelInput In, out SPixelOutput Out)\n"
"{\n"
"    float3 Normal   = normalize(In.Normal);\n"
"    float2 TexCoord = In.TexCoord;\n"
"\n"
"    #if defined(USE_NORMAL_MAPPING) && defined(USE_PARALLAX_MAPPING)\n"
"\n"
"    /* Compute parallax-occlusion displacement */\n"
"    float4 NormalAndHeightColor = tex2D(NormalAndHeightMap, TexCoord);\n"
"\n"
"    //todo ...\n"
"\n"
"    #endif\n"
"\n"
"    /* Process color output */\n"
"    Out.DiffuseAndSpecular = tex2D(DiffuseMap, TexCoord);\n"
"    \n"
"    clip(Out.DiffuseAndSpecular.a - 0.5);\n"
"\n"
"    #ifdef HAS_SPECULAR_MAP\n"
"    /* Process specular output */\n"
"    Out.DiffuseAndSpecular.a = tex2D(SpecularMap, TexCoord).r;\n"
"    #endif\n"
"\n"
"    /* Process normal vector output */\n"
"    #ifdef USE_NORMAL_MAPPING\n"
"\n"
"    #   ifndef USE_PARALLAX_MAPPING\n"
"    float4 NormalAndHeightColor = tex2D(NormalAndHeightMap, TexCoord);\n"
"    #   endif\n"
"\n"
"    /* Compute normal in tangent-space */\n"
"    float3x3 NormalMatrix = float3x3(\n"
"        normalize(In.Tangent),\n"
"        normalize(In.Binormal),\n"
"        Normal\n"
"    );\n"
"\n"
"    NormalAndHeightColor.xyz *= float3(2.0);\n"
"    NormalAndHeightColor.xyz -= float3(1.0);\n"
"\n"
"    Normal = mul(NormalMatrix, NormalAndHeightColor.xyz);\n"
"\n"
"    #endif\n"
"\n"
"    Out.Normal = Normal * float3(0.5) + float3(0.5);\n"
"}\n"
