/*
 * Bloom filter Cg shader file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

#define SAMPLE_COUNT 9

/*
 * ======= Vertex shader: =======
 */

/* === Structures === */

struct SVertexInput
{
    float3 Position : POSITION;
    float2 TexCoord : TEXCOORD0;
};

struct SVertexOutput
{
    float4 Position : POSITION;
    float2 TexCoord : TEXCOORD0;
};


/* === Uniforms === */

uniform float4x4 ProjectionMatrix;


/* === Functions === */

SVertexOutput VertexMain(SVertexInput In)
{
    SVertexOutput Out = (SVertexOutput)0;
    
    /* Process vertex transformation for position and normal */
    Out.Position = mul(ProjectionMatrix, float4(In.Position, 1));
    Out.TexCoord = In.TexCoord;
    
    return Out;
}


/*
 * ======= Pixel shader: =======
 */

/* === Uniforms === */

uniform sampler2D Tex : TEXUNIT0;

uniform float2 BlurOffsets[SAMPLE_COUNT];
uniform float BlurWeights[SAMPLE_COUNT];


/* === Functions === */

// Vertex render pass
float4 PixelMainHRP(float2 TexCoord : TEXCOORD0) : COLOR
{
    float4 Color = float4(0.0, 0.0, 0.0, 1.0);

    for (int i = 0; i < SAMPLE_COUNT; ++i)
        Color.rgb += tex2D(Tex, TexCoord + float2(BlurOffsets[i].x, 0.0)).rgb * float3(BlurWeights[i]);
    
    return Color;
}

// Horizontal render pass
float4 PixelMainVRP(float2 TexCoord : TEXCOORD0) : COLOR
{
    float4 Color = float4(0.0, 0.0, 0.0, 1.0);

    for (int i = 0; i < SAMPLE_COUNT; ++i)
        Color.rgb += tex2D(Tex, TexCoord + float2(0.0, BlurOffsets[i].y)).rgb * float3(BlurWeights[i]);
    
    return Color;
}
