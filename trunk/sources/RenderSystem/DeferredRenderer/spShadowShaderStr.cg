"/*\n"
" * Shadow Cg shader file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"/*\n"
"\n"
"Compilation options:\n"
"\n"
"USE_VSM             -> Enables use of VSMs (variance shadow maps).\n"
"USE_TEXTURE         -> Enables use of one texture for alpha test.\n"
"USE_TEXTURE_MATRIX  -> Enables texture matrix transformations for texture coordinates.\n"
"\n"
"*/\n"
"\n"
"/*\n"
" * ======= Vertex shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SVertexInput\n"
"{\n"
"    float3 Position : POSITION;\n"
"    #ifdef USE_TEXTURE\n"
"    float2 TexCoord : TEXCOORD0;\n"
"    #endif\n"
"};\n"
"\n"
"struct SVertexOutput\n"
"{\n"
"    float4 Position : POSITION;\n"
"    float3 WorldPos : TEXCOORD0;\n"
"    #ifdef USE_TEXTURE\n"
"    float2 TexCoord : TEXCOORD1;\n"
"    #endif\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform float4x4 WorldViewProjectionMatrix;\n"
"uniform float4x4 WorldMatrix;\n"
"\n"
"#ifdef USE_TEXTURE_MATRIX\n"
"uniform float4x4 TextureMatrix;\n"
"#endif\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"SVertexOutput VertexMain(SVertexInput In)\n"
"{\n"
"    SVertexOutput Out = (SVertexOutput)0;\n"
"    \n"
"    /* Process vertex transformation for perspective- and global position */\n"
"    Out.Position = mul(WorldViewProjectionMatrix, float4(In.Position, 1.0));\n"
"    Out.WorldPos = mul(WorldMatrix, float4(In.Position, 1.0)).xyz;\n"
"\n"
"    /* Process texture coordinate */\n"
"    #ifdef USE_TEXTURE\n"
"    #   ifdef USE_TEXTURE_MATRIX\n"
"    Out.TexCoord = (float2)mul(TextureMatrix, float4(In.TexCoord, 0.0, 1.0));\n"
"    #   else\n"
"    Out.TexCoord = In.TexCoord;\n"
"    #   endif\n"
"    #endif\n"
"\n"
"    return Out;\n"
"}\n"
"\n"
"\n"
"/*\n"
" * ======= Pixel shader: =======\n"
" */\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SPixelInput\n"
"{\n"
"    float3 WorldPos : TEXCOORD0;\n"
"    #ifdef USE_TEXTURE\n"
"    float2 TexCoord : TEXCOORd1;\n"
"    #endif\n"
"};\n"
"\n"
"struct SPixelOutput\n"
"{\n"
"    #ifdef USE_VSM\n"
"    float4 DepthDist : COLOR;\n"
"    #else\n"
"    float DepthDist : COLOR;\n"
"    #endif\n"
"};\n"
"\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform float3 ViewPosition;    //!< Global camera position.\n"
"\n"
"#ifdef USE_TEXTURE\n"
"uniform sampler2D AlphaMap : TEXUNIT0;\n"
"#endif\n"
"\n"
"\n"
"/* === Functions === */\n"
"\n"
"#ifdef USE_VSM\n"
"\n"
"float2 ComputeMoments(float Depth)\n"
"{\n"
"    float2 Moments;\n"
"    \n"
"    // First moment is the depth itself\n"
"    Moments.x = Depth;\n"
"    \n"
"    // Compute partial derivatives of depth\n"
"    float dx = ddx(Depth);\n"
"    float dy = ddy(Depth);\n"
"    \n"
"    Moments.y = Depth*Depth + 0.25 * (dx*dx + dy*dy);\n"
"    \n"
"    return Moments;\n"
"}\n"
"\n"
"#endif\n"
"\n"
"SPixelOutput PixelMain(SPixelInput In)\n"
"{\n"
"    SPixelOutput Out = (SPixelOutput)0;\n"
"    \n"
"    #ifdef USE_TEXTURE\n"
"    /* Perform alpha-test */\n"
"    clip(tex2D(AlphaMap, In.TexCoord).a - 0.5);\n"
"    #endif\n"
"\n"
"    /* Compute depth distance */\n"
"    float Depth = distance(In.WorldPos, ViewPosition);\n"
"\n"
"    #ifdef USE_VSM\n"
"\n"
"    float2 Moments = ComputeMoments(Depth);\n"
"\n"
"    Out.DepthDist.r = Moments.x;\n"
"    Out.DepthDist.a = Moments.y;\n"
"\n"
"    #else\n"
"\n"
"    Out.DepthDist.r = Depth;\n"
"\n"
"    #endif\n"
"\n"
"    return Out;\n"
"}\n"
