/*
 * Deferred GLSL fragment shader header file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

//#version 140

/*

Compilation options:

MAX_LIGHTS				-> Maximal count of light sources.
MAX_EX_LIGHTS			-> Maximal count of extended light sources (e.g. spot lights).

SHADOW_MAPPING  		-> Enables shadow mapping.
GLOBAL_ILLUMINATION		-> Enables global illumination (requires SHADOW_MAPPING).
BLOOM_FILTER    		-> Enables bloom filter.
DEBUG_GBUFFER   		-> Renders g-buffer for debugging.
DEBUG_GBUFFER_WORLDPOS	-> Renders position-map instead of depth map.
HAS_LIGHT_MAP			-> Specifies that a lightmap is used.
ALLOW_OVERBLENDING		-> Allows the lighting to ober-blend.

*/

#extension GL_ARB_explicit_attrib_location : enable

#ifdef SHADOW_MAPPING
#	extension GL_EXT_texture_array : enable
#	extension GL_ARB_texture_cube_map_array : enable
#	ifdef GLOBAL_ILLUMINATION
#		extension GL_EXT_gpu_shader4 : enable
#	endif
#endif

/* === Uniforms === */

uniform sampler2D DiffuseAndSpecularMap;
uniform sampler2D NormalAndDepthMap;

#ifdef HAS_LIGHT_MAP
uniform sampler2D IlluminationMap;
#endif

#ifdef SHADOW_MAPPING

// Depth maps (for standard shadow maps)
uniform sampler2DArray DirLightShadowMaps;
uniform samplerCubeArray PointLightShadowMaps;

#	ifdef GLOBAL_ILLUMINATION
// Diffuse maps (for reflective shadow maps)
uniform sampler2DArray DirLightDiffuseMaps;
uniform samplerCubeArray PointLightDiffuseMaps;

// Normal maps (for reflective shadow maps)
uniform sampler2DArray DirLightNormalMaps;
uniform samplerCubeArray PointLightNormalMaps;
#	endif

#endif

#ifdef GLOBAL_ILLUMINATION

uniform float GIReflectivity;

layout(std140) uniform VPLOffsetBlock
{
	float4 VPLOffsets[100];
};

#endif

uniform int LightCount;
uniform int LightExCount;

//#define CONSTANT_BUFFERS

#ifdef CONSTANT_BUFFERS

layout(std140) uniform LightBlock
{
	SLight Lights[MAX_LIGHTS];
	SLightEx LightsEx[MAX_EX_LIGHTS];
};

#else

uniform SLight Lights[MAX_LIGHTS];
uniform SLightEx LightsEx[MAX_EX_LIGHTS];

#endif

uniform float3 ViewPosition;		//!< Global camera position.
uniform float3 AmbientColor;		//!< Ambient light color.

uniform float2 JitteredOffsets[NUM_JITTERD_OFFSETS];

/* === Varyings === */

in float2 TexCoord;
in float4 ViewRay;

//layout(origin_upper_left) in float4 gl_FragCoord;

layout(location = 0) out float4 OutputColor;

#ifdef BLOOM_FILTER
layout(location = 1) out float4 OutputSpecular;
#endif
