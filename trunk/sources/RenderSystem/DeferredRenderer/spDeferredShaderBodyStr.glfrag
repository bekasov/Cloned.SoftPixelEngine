"/*\n"
" * Deferred GLSL fragment shader body file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"void main()\n"
"{\n"
"    /* Get texture colors */\n"
"    float4 DiffuseAndSpecular = tex2D(DiffuseAndSpecularMap, TexCoord);\n"
"    float4 NormalAndDepthDist = tex2D(NormalAndDepthMap, TexCoord);\n"
"    \n"
"    /* Compute global pixel position (world space) */\n"
"    float3 ViewRayNorm = normalize(ViewRay.xyz);\n"
"    float3 WorldPos = ViewPosition + ViewRayNorm * float3(NormalAndDepthDist.a);\n"
"    \n"
"    /* Compute light shading */\n"
"    #ifdef HAS_LIGHT_MAP\n"
"    float3 StaticDiffuseLight = float3(0.0);\n"
"    float3 StaticSpecularLight = float3(0.0);\n"
"    #endif\n"
"    \n"
"    float3 DiffuseLight = AmbientColor;\n"
"    float3 SpecularLight = float3(0.0);\n"
"    \n"
"    for (int i = 0, j = 0; i < LightCount; ++i)\n"
"    {\n"
"        ComputeLightShading(\n"
"            Lights[i], LightsEx[j], WorldPos, NormalAndDepthDist.xyz, 90.0, ViewRayNorm,\n"
"            #ifdef HAS_LIGHT_MAP\n"
"            StaticDiffuseLight, StaticSpecularLight,\n"
"            #endif\n"
"            DiffuseLight, SpecularLight\n"
"        );\n"
"        \n"
"        if (Lights[i].Type != LIGHT_POINT)\n"
"            ++j;\n"
"    }\n"
"    \n"
"    #ifdef HAS_LIGHT_MAP\n"
"    \n"
"    /* Mix light shading with light-map illumination */\n"
"    float Illumination = tex2D(IlluminationMap, TexCoord).r;\n"
"    \n"
"    DiffuseLight += (StaticDiffuseLight * float3(Illumination));\n"
"    SpecularLight += (StaticSpecularLight * float3(Illumination));\n"
"    \n"
"    #endif\n"
"    \n"
"    #ifndef ALLOW_OVERBLENDING\n"
"    DiffuseLight = saturate(DiffuseLight);\n"
"    SpecularLight = saturate(SpecularLight);\n"
"    #endif\n"
"    \n"
"    DiffuseLight *= DiffuseAndSpecular.rgb;\n"
"    SpecularLight *= float3(DiffuseAndSpecular.a);\n"
"    \n"
"    /* Compute final deferred shaded pixel color */\n"
"    OutputColor.rgb    = DiffuseLight + SpecularLight;\n"
"    OutputColor.a    = 1.0;\n"
"    \n"
"    #ifdef BLOOM_FILTER\n"
"    OutputSpecular.rgb    = SpecularLight;\n"
"    OutputSpecular.a    = 1.0;\n"
"    #endif\n"
"    \n"
"    #ifdef DEBUG_GBUFFER\n"
"    \n"
"    /*if (debTexCoord.x > 1.0)\n"
"    {\n"
"        if (debTexCoord.y > 1.0)\n"
"            OutputColor.rgb = tex2D(NormalAndDepthMap, TexCoord).rgb * float3(0.5) + float3(0.5);\n"
"        else\n"
"            OutputColor.rgb = DiffuseAndSpecular.rgb;\n"
"    }\n"
"    else\n"
"    {\n"
"        if (debTexCoord.y > 1.0)\n"
"        {*/\n"
"            #ifdef DEBUG_GBUFFER_WORLDPOS\n"
"            WorldPos += 0.01;\n"
"            OutputColor.rgb = WorldPos - floor(WorldPos);\n"
"            #else\n"
"            OutputColor.rgb = float3(NormalAndDepthDist.a  - floor(NormalAndDepthDist.a));\n"
"            #endif\n"
"        /*}\n"
"    }*/\n"
"    \n"
"    #endif\n"
"}\n"
