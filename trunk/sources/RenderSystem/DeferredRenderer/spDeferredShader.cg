/*
 * Deferred Cg shader file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

/*

Compilation options:

SHADOW_MAPPING  -> Enables shadow mapping.
BLOOM_FILTER    -> Enables bloom filter.
DEBUG_GBUFFER   -> Renders g-buffer for debugging.
FLIP_Y_AXIS     -> Flips Y axis for OpenGL FBOs.

*/

#define MAX_LIGHTS              35
#define MAX_EX_LIGHTS           15

#define LIGHT_DIRECTIONAL       0
#define LIGHT_POINT             1
#define LIGHT_SPOT              2

#define AMBIENT_LIGHT_FACTOR    0.1 //!< Should be in the range [0.0 .. 1.0].


/*
 * ======= Vertex shader: =======
 */

/* === Structures === */

struct SVertexInput
{
    float3 Position : POSITION;
    float2 TexCoord : TEXCOORD0;
};

struct SVertexOutput
{
    float4 Position : POSITION;
    float2 TexCoord : TEXCOORD0;
};


/* === Uniforms === */

uniform float4x4 ProjectionMatrix;


/* === Functions === */

SVertexOutput VertexMain(SVertexInput In)
{
    SVertexOutput Out = (SVertexOutput)0;
    
    /* Process vertex transformation for position and normal */
    Out.Position = mul(ProjectionMatrix, float4(In.Position, 1));
    Out.TexCoord = In.TexCoord;
    
    return Out;
}


/*
 * ======= Pixel shader: =======
 */

/* === Structures === */

struct SPixelInput
{
    float2 TexCoord : TEXCOORD0;
    float2 WinCoord : WPOS;
};

struct SPixelOutput
{
    float4 Color : COLOR0;
    #ifdef BLOOM_FILTER
    float4 Gloss : COLOR1;
    #endif
};

struct SLight
{
    float4 PositionAndRadius;   //!< Position (xyz), Radius (w).
    float3 Color;               //!< Light color (used for diffuse and specular).
    int Type;                   //!< 0 -> Directional light, 1 -> Point light, 1 -> Spot light.
    int ShadowIndex;            //!< Shadow map layer index.
};

struct SLightEx
{
    float4x4 Projection;        //!< Spot-/ directional projection matrix.
    float3 Direction;           //!< Spot-/ directional light direction.
    float SpotTheta;            //!< First spot cone angle (in radian).
    float SpotPhiMinusTheta;    //!< Second minus first spot cone angle (in radian).
};


/* === Uniforms === */

uniform sampler2D DiffuseAndSpecularMap : TEXUNIT0;
uniform sampler2D NormalAndDepthMap     : TEXUNIT1;

#ifdef SHADOW_MAPPING
uniform sampler2DARRAY DirLightShadowMaps;
uniform samplerCUBEARRAY PointLightShadowMaps;
#endif

uniform int LightCount;
uniform int LightExCount;

uniform SLight Lights[MAX_LIGHTS];
uniform SLightEx LightsEx[MAX_EX_LIGHTS];

uniform float4x4 ViewTransform; //!< Global camera transformation.
uniform float3 ViewPosition;    //!< Global camera position.
uniform float ScreenWidth;      //!< Screen resolution width.
uniform float ScreenHeight;     //!< Screen resolution height.


/* === Functions === */

inline float GetAngle(float3 a, float3 b)
{
    return acos(dot(a, b));
}

void Frustum(inout float x, inout float y, float w, float h)
{
    float aspect = (w*3.0) / (h*4.0);
    x = (x - w*0.5) / (w*0.5) * aspect;
    y = (y - h*0.5) / (w*0.5) * aspect;
}

void ComputeLightShading(
    SLight Light, SLightEx LightEx,
    float3 Point, float3 Normal, float Shininess,
    inout vec3 DiffuseColor, inout vec3 SpecularColor)
{
    /* Compute light direction vector */
    float3 LightDir = (float3)0;

    if (Light.Type != LIGHT_DIRECTIONAL)
        LightDir = normalize(Point - Light.PositionAndRadius.xyz);
    else
        LightDir = LightEx.Direction;

    /* Compute phong shading */
    float NdotL = max(AMBIENT_LIGHT_FACTOR, -dot(Normal, LightDir));

    /* Compute light attenuation */
    float Distance = distance(Point, Light.PositionAndRadius.xyz);

    float AttnLinear    = Distance / Light.PositionAndRadius.w;
    float AttnQuadratic = AttnLinear * Distance;

    float Intensity = 1.0 / (1.0 + AttnLinear + AttnQuadratic);

    if (Light.Type == LIGHT_SPOT)
    {
        /* Compute spot light cone */
        float Angle = GetAngle(LightDir, LightEx.Direction);
        float ConeAngleLerp = (Angle - LightEx.SpotTheta) / LightEx.SpotPhiMinusTheta;

        Intensity *= saturate(1.0 - ConeAngleLerp);
    }

    /* Compute diffuse color */
    DiffuseColor += Light.Color * float3(Intensity * NdotL);

    /* Compute specular color */
    float3 ViewDir      = normalize(Point - ViewPosition);
    float3 Reflection   = normalize(reflect(LightDir, Normal));

    float NdotHV = -dot(ViewDir, Reflection);

    SpecularColor += Light.Color * float3(Intensity * pow(max(0.0, NdotHV), Shininess));
}

// Chebyshev inequality function for VSM (variance shadow maps)
// see GPUGems3 at nVIDIA for more details: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch08.html
float ChebyshevUpperBound(float2 Moments, float t)
{
    /* One-tailed inequality valid if t > Moments.x */
    float p = (t <= Moments.x);
    
    /* Compute variance */
    float Variance = Moments.y – (Moments.x*Moments.x);
    Variance = max(Variance, 0.0);//MinVariance);
    
    /* Compute probabilistic upper bound. */
    float d = t – Moments.x;
    float p_max = Variance / (Variance + d*d);
    
    return max(p, p_max);
}

SPixelOutput PixelMain(SPixelInput In)
{
    SPixelOutput Out = (SPixelOutput)0;

    float2 TexCoord = In.TexCoord;
    float2 WinCoord = In.WinCoord;
    
    #ifdef DEBUG_GBUFFER

    TexCoord *= float2(2.0);
    WinCoord *= float2(2.0);

    float2 debTexCoord = TexCoord;

    if (TexCoord.x > 1.0) TexCoord.x -= 1.0;
    if (TexCoord.y > 1.0) TexCoord.y -= 1.0;

    if (WinCoord.x > ScreenWidth) WinCoord.x -= ScreenWidth;
    if (WinCoord.y > ScreenHeight) WinCoord.y -= ScreenHeight;

    #endif
    
    /* Get texture colors */
    float4 DiffuseAndSpecular = tex2D(DiffuseAndSpecularMap, TexCoord);
    float4 NormalAndDepthDist = tex2D(NormalAndDepthMap, TexCoord);

    /* Compute global pixel position */
    #ifdef FLIP_Y_AXIS
    float4 Point = float4(WinCoord.x, ScreenHeight - WinCoord.y, 1.0, 1.0);
    #else
    float4 Point = float4(WinCoord.x, WinCoord.y, 1.0, 1.0);
    #endif

    Frustum(Point.x, Point.y, ScreenWidth, ScreenHeight);

    Point.xyz = normalize(Point.xyz) * float3(NormalAndDepthDist.a);
    Point = mul(ViewTransform, Point);

    /* Compute light shading */
    float3 DiffuseLight = (float3)0;
    float3 SpecularLight = (float3)0;
    
    for (int i = 0, j = 0; i < LightCount; ++i)
    {
        ComputeLightShading(Lights[i], LightsEx[j], Point.xyz, NormalAndDepthDist.xyz, 90.0, DiffuseLight, SpecularLight);
        
        if (Lights[i].Type != LIGHT_POINT)
            ++j;
    }

    DiffuseLight *= DiffuseAndSpecular.rgb;
    SpecularLight *= float3(DiffuseAndSpecular.a);

    /* Compute final deferred shaded pixel color */
    Out.Color.rgb   = DiffuseLight + SpecularLight;
    Out.Color.a     = 1.0;

    #ifdef BLOOM_FILTER
    Out.Gloss.rgb   = SpecularLight;
    Out.Gloss.a     = 1.0;
    #endif
    
    #ifdef DEBUG_GBUFFER

    if (debTexCoord.x > 1.0)
    {
        if (debTexCoord.y > 1.0)
            Out.Color.rgb = tex2D(NormalAndDepthMap, TexCoord).rgb * float3(0.5) + float3(0.5);
        else
            Out.Color.rgb = DiffuseAndSpecular.rgb;
    }
    else
    {
        if (debTexCoord.y > 1.0)
            Out.Color.rgb = Point.xyz * float3(0.1);
    }

    #endif

    return Out;
}
