"/*\n"
" * Deferred GLSL fragment shader header file\n"
" * \n"
" * This file is part of the \"SoftPixel Engine\" (Copyright (c) 2008 by Lukas Hermanns)\n"
" * See \"SoftPixelEngine.hpp\" for license information.\n"
" */\n"
"\n"
"#version 120\n"
"\n"
"/*\n"
"\n"
"Compilation options:\n"
"\n"
"MAX_LIGHTS                -> Maximal count of light sources.\n"
"MAX_EX_LIGHTS            -> Maximal count of extended light sources (e.g. spot lights).\n"
"\n"
"SHADOW_MAPPING          -> Enables shadow mapping.\n"
"GLOBAL_ILLUMINATION        -> Enables global illumination (requires SHADOW_MAPPING).\n"
"BLOOM_FILTER            -> Enables bloom filter.\n"
"DEBUG_GBUFFER           -> Renders g-buffer for debugging.\n"
"DEBUG_GBUFFER_WORLDPOS    -> Renders position-map instead of depth map.\n"
"HAS_LIGHT_MAP            -> Specifies that a lightmap is used.\n"
"ALLOW_OVERBLENDING        -> Allows the lighting to ober-blend.\n"
"\n"
"*/\n"
"\n"
"#if defined(GL_EXT_texture_array) && defined(GL_ARB_texture_cube_map_array)\n"
"#    define TEXTURE_ARRAYS_SUPPORTED\n"
"#endif\n"
"\n"
"#if defined(TEXTURE_ARRAYS_SUPPORTED)\n"
"#    extension GL_EXT_texture_array : enable\n"
"#    extension GL_ARB_texture_cube_map_array : enable\n"
"#elif defined(SHADOW_MAPPING)\n"
"#    undef SHADOW_MAPPING\n"
"#endif\n"
"\n"
"/* === Macros === */\n"
"\n"
"#ifndef MAX_LIGHTS\n"
"#    define MAX_LIGHTS           35\n"
"#endif\n"
"#ifndef MAX_EX_LIGHTS\n"
"#    define MAX_EX_LIGHTS        15\n"
"#endif\n"
"\n"
"#define LIGHT_DIRECTIONAL       0\n"
"#define LIGHT_POINT             1\n"
"#define LIGHT_SPOT              2\n"
"\n"
"#define AMBIENT_LIGHT_FACTOR    0.0//0.1 //!< Should be in the range [0.0 .. 1.0].\n"
"\n"
"#define MIN_VARIANCE            1.0\n"
"\n"
"/* === Structures === */\n"
"\n"
"struct SLight\n"
"{\n"
"    float4 PositionAndRadius;   //!< Position (xyz), Radius (w).\n"
"    float3 Color;               //!< Light color (used for diffuse and specular).\n"
"    int Type;                   //!< 0 -> Directional light, 1 -> Point light, 2 -> Spot light.\n"
"    int ShadowIndex;            //!< Shadow map layer index.\n"
"    int UsedForLightmaps;        //!< Specifies whether this light is used for lightmaps or not.\n"
"};\n"
"\n"
"struct SLightEx\n"
"{\n"
"    float4x4 Projection;        //!< Spot-/ directional projection matrix.\n"
"    float3 Direction;              //!< Spot-/ directional light direction.\n"
"    float SpotTheta;            //!< First spot cone angle (in radian).\n"
"    float SpotPhiMinusTheta;    //!< Second minus first spot cone angle (in radian).\n"
"    #ifdef GLOBAL_ILLUMINATION\n"
"    float4x4 ViewTransform;        //!< View transformation matrix for reflective shadow maps.\n"
"    #endif\n"
"};\n"
"\n"
"/* === Uniforms === */\n"
"\n"
"uniform sampler2D DiffuseAndSpecularMap;\n"
"uniform sampler2D NormalAndDepthMap;\n"
"\n"
"#ifdef HAS_LIGHT_MAP\n"
"uniform sampler2D IlluminationMap;\n"
"#endif\n"
"\n"
"#ifdef SHADOW_MAPPING\n"
"\n"
"// Depth maps (for standard shadow maps)\n"
"uniform sampler2DArray DirLightShadowMaps;\n"
"uniform samplerCubeArray PointLightShadowMaps;\n"
"\n"
"#    ifdef GLOBAL_ILLUMINATION\n"
"// Diffuse maps (for reflective shadow maps)\n"
"uniform sampler2DArray DirLightDiffuseMaps;\n"
"uniform samplerCubeArray PointLightDiffuseMaps;\n"
"\n"
"// Normal maps (for reflective shadow maps)\n"
"uniform sampler2DArray DirLightNormalMaps;\n"
"uniform samplerCubeArray PointLightNormalMaps;\n"
"#    endif\n"
"\n"
"#endif\n"
"\n"
"uniform int LightCount;\n"
"uniform int LightExCount;\n"
"\n"
"uniform SLight Lights[MAX_LIGHTS];\n"
"uniform SLightEx LightsEx[MAX_EX_LIGHTS];\n"
"\n"
"uniform float3 ViewPosition;        //!< Global camera position.\n"
"uniform float3 AmbientColor;        //!< Ambient light color.\n"
"\n"
"/* === Varyings === */\n"
"\n"
"varying float2 TexCoord;\n"
"varying float4 ViewRay;\n"
