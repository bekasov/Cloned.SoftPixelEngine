/*
 * GBuffer GLSL vertex shader file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

#version 120

#include <softpixelengine>

/*

Compilation options:

USE_TEXTURE_MATRIX  -> Enables texture matrix transformations for texture coordinates.
NORMAL_MAPPING      -> Enables normal mapping.
PARALLAX_MAPPING    -> Enables parallax-occlusion mapping (Requires NORMAL_MAPPING to be enabled).
HAS_LIGHT_MAP		-> Specifies that a lightmap is used.

*/

/* === Uniforms === */

uniform float4x4 WorldViewProjectionMatrix;
uniform float4x4 WorldMatrix;

#ifdef USE_TEXTURE_MATRIX
uniform float4x4 TextureMatrix;
#endif

uniform float3 ViewPosition;    //!< Global camera position.

/* === Varyings === */

varying float3 WorldPos;
varying float3 Normal;
varying float2 TexCoord;

#ifdef HAS_LIGHT_MAP
varying float2 LMTexCoord;
#endif

#ifdef NORMAL_MAPPING
varying float3 Tangent;
varying float3 Binormal;
#   ifdef PARALLAX_MAPPING
varying float4 ViewVertexDirAndDepth;
#   endif
#endif

/* === Functions === */

void main()
{
    /* Process vertex transformation for position and normal */
	float3x3 NormalMatrix = float3x3(WorldMatrix);
	
    gl_Position	= WorldViewProjectionMatrix * gl_Vertex;
    WorldPos   	= float3(WorldMatrix * gl_Vertex);
    Normal      = normalize(NormalMatrix * gl_Normal);
	
    #ifdef NORMAL_MAPPING
    
    /* Process transformation for tangent space */
    Tangent     = normalize(NormalMatrix * gl_MultiTexCoord1.xyz);
    Binormal    = normalize(NormalMatrix * gl_MultiTexCoord2.xyz);
	
    #   ifdef PARALLAX_MAPPING
    NormalMatrix = float3x3(
        Tangent,
        Binormal,
        Normal
    );
	
	//!THIS PART IS INCOMPLETE!
    ViewVertexDirAndDepth.xyz   = ViewPosition - WorldPos;
    ViewVertexDirAndDepth.xyz   = transpose(NormalMatrix) * ViewVertexDirAndDepth.xyz;
    ViewVertexDirAndDepth.y     = -ViewVertexDirAndDepth.y;
	
    ViewVertexDirAndDepth.w     = gl_Position.z;
    #   endif

    #endif
	
    #ifdef USE_TEXTURE_MATRIX
    TexCoord = float2(TextureMatrix * float4(gl_MultiTexCoord0, 0.0, 1.0));
    #else
    TexCoord = gl_MultiTexCoord0.xy;
    #endif
	
	#ifdef HAS_LIGHT_MAP
	LMTexCoord = gl_MultiTexCoord3.xy;
	#endif
}
