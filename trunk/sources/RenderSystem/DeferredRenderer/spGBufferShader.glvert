/*
 * GBuffer GLSL vertex shader file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

#version 120

/*

Compilation options:

USE_TEXTURE_MATRIX  -> Enables texture matrix transformations for texture coordinates.
NORMAL_MAPPING      -> Enables normal mapping.
PARALLAX_MAPPING    -> Enables parallax-occlusion mapping (Requires NORMAL_MAPPING to be enabled).

*/

/* === Uniforms === */

uniform mat4 WorldViewProjectionMatrix;
uniform mat4 WorldMatrix;

#ifdef USE_TEXTURE_MATRIX
uniform mat4 TextureMatrix;
#endif

uniform vec3 ViewPosition;    //!< Global camera position.

/* === Varyings === */

varying vec3 WorldPos;
varying vec3 Normal;
varying vec2 TexCoord;

#ifdef NORMAL_MAPPING
varying vec3 Tangent;
varying vec3 Binormal;
#   ifdef PARALLAX_MAPPING
varying vec4 ViewVertexDirAndDepth;
#   endif
#endif

/* === Functions === */

void main()
{
    /* Process vertex transformation for position and normal */
    gl_Position	= WorldViewProjectionMatrix * gl_Vertex;
    WorldPos   	= vec3(WorldMatrix * gl_Vertex);
    Normal      = mat3(WorldMatrix) * gl_Normal;
	
    #ifdef NORMAL_MAPPING
    
    /* Process transformation for tangent space */
    Tangent     = mat3(WorldMatrix) * gl_MultiTexCoord1.xyz;
    Binormal    = mat3(WorldMatrix) * gl_MultiTexCoord2.xyz;
	
    #   ifdef PARALLAX_MAPPING
    mat3 NormalMatrix = mat3(
        normalize(Tangent),
        normalize(Binormal),
        normalize(Normal)
    );
	
    ViewVertexDirAndDepth.xyz   = ViewPosition - WorldPos.xyz;
    ViewVertexDirAndDepth.xyz   = transpose(NormalMatrix) * ViewVertexDirAndDepth.xyz;
    ViewVertexDirAndDepth.y     = -ViewVertexDirAndDepth.y;
	
    ViewVertexDirAndDepth.w     = gl_Position.z;
    #   endif

    #endif
	
    #ifdef USE_TEXTURE_MATRIX
    TexCoord = vec2(TextureMatrix * vec4(gl_MultiTexCoord0, 0.0, 1.0));
    #else
    TexCoord = gl_MultiTexCoord0.xy;
    #endif
}
