/*
 * HLSL (SM 5) shader core file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

/* === Shader information === */

#define SP_HLSL 5

/* === Base math constants === */

#define PI						3.14159265359
#define E						2.71828182846

/* === Function extensions === */

#define MUL(m, v)				mul(m, v)
#define MUL_TRANSPOSED(v, m)	mul(v, m)
#define MUL_NORMAL(n)			(n).xyz = mul((n).xyz, float3x3(Tangent, Binormal, Normal))
#define CAST(t, v)				((t)(v))
#define SAMPLER2D(n, i)			Texture2D n : register(t##i); SamplerState Sampler##n : register(s##i)
#define SAMPLER2DARRAY(n, i)	Texture2DArray n : register(t##i); SamplerState Sampler##n : register(s##i)
#define SAMPLERCUBEARRAY(n, i)	TextureCubeArray n : register(t##i); SamplerState Sampler##n : register(s##i)

#define DeclSampler2D			SAMPLER2D
#define DeclSampler2DArray		SAMPLER2DARRAY
#define DeclSamplerCubeMap		SAMPLERCUBEARRAY

#define mod(a, b)				fmod(a, b)

#define floatBitsToInt(v)		asint(v)
#define floatBitsToUInt(v)		asuint(v)
#define intBitsToFloat(v)		asfloat(v)
#define uintBitsToFloat(v)		asfloat(v)

#define tex2D(s, t)				s.Sample(Sampler##s, t)
#define tex2DArray(s, t)		s.Sample(Sampler##s, t)
#define tex2DArrayLod(s, t)		s.SampleLevel(Sampler##s, t.xyz, t.w)
#define tex2DGrad(s, t, dx, dy)	s.SampleGrad(Sampler##s, t, dx, dy)

#define RWTexture3DUInt			RWTexture3D<uint>

/* === Texture and buffer operations === */

#define DeclStructuredBuffer(s, n, r)	StructuredBuffer<s> n : register(t##r)
#define DeclBuffer(t, n, r)				Buffer<t> n : register(t##r)

#define DeclRWStructuredBuffer(s, n, r)	RWStructuredBuffer<s> n : register(u##r)
#define DeclRWBuffer(t, n, r)			RWBuffer<t> n : register(u##r)

#define DeclConstBuffer(n, r)			cbuffer n : register(b##r)

/* === Structures === */

struct SFullscreenQuadVertexOutput
{
    float4 Position : SV_Position;
    float2 TexCoord : TEXCOORD0;
};

/* === Functions === */

SFullscreenQuadVertexOutput FullscreenQuadVertexMain(uint Id)
{
    SFullscreenQuadVertexOutput Out = (SFullscreenQuadVertexOutput)0;
	
	Out.Position = float4(
		(Id == 2) ? 3.0 : -1.0,
		(Id == 0) ? -3.0 : 1.0,
		0.0,
		1.0
	);
	
	Out.TexCoord.x = Out.Position.x * 0.5 + 0.5;
	Out.TexCoord.y = 0.5 - Out.Position.y * 0.5;
	
	return Out;
}

inline void InterlockedImageCompareExchange(RWTexture3DUInt Image, int3 Coord, uint Compare, uint Value, out uint Result)
{
	InterlockedCompareExchange(Image[Coord], Compare, Value, Result);
}
