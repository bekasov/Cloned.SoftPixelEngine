/*
 * HLSL (SM 5) shader core file
 * 
 * This file is part of the "SoftPixel Engine" (Copyright (c) 2008 by Lukas Hermanns)
 * See "SoftPixelEngine.hpp" for license information.
 */

#define PI						3.14159265359
#define E						2.71828182846

#define MUL(m, v)				mul(m, v)
#define MUL_TRANSPOSED(v, m)	mul(v, m)
#define MUL_NORMAL(n)			(n).xyz = mul((n).xyz, float3x3(Tangent, Binormal, Normal))
#define CAST(t, v)				((t)(v))
#define SAMPLER2D(n, i)			Texture2D n : register(t##i); SamplerState Sampler##n : register(s##i)
#define SAMPLER2DARRAY(n, i)	Texture2DArray n : register(t##i); SamplerState Sampler##n : register(s##i)
#define SAMPLERCUBEARRAY(n, i)	TextureCubeArray n : register(t##i); SamplerState Sampler##n : register(s##i)

#define mod(a, b)				fmod(a, b)

#define floatBitsToInt(v)		asint(v)
#define floatBitsToUInt(v)		asuint(v)
#define intBitsToFloat(v)		asfloat(v)
#define uintBitsToFloat(v)		asfloat(v)

#define tex2D(s, t)				s.Sample(Sampler##s, t)
#define tex2DArray(s, t)		s.SampleLevel(Sampler##s, t.xyz)
#define tex2DArrayLod(s, t)		s.SampleLevel(Sampler##s, t.xyz, t.w)
#define tex2DGrad(s, t, dx, dy)	s.SampleGrad(Sampler##s, t, dx, dy)

#define RWTexture3DUInt			RWTexture3D<uint>

inline void InterlockedImageCompareExchange(RWTexture3DUInt Image, int3 Coord, uint Compare, uint Value, out uint Result)
{
	InterlockedCompareExchange(Image[Coord], Compare, Value, Result);
}
